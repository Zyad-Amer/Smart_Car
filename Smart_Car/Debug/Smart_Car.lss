
Smart_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00003aa0  00003b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800070  00800070  00003b44  2**0
                  ALLOC
  3 .stab         00003558  00000000  00000000  00003b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b4  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000087b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000893f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ba85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ca08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ce4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 07 	call	0xea6	; 0xea6 <main>
      8a:	0c 94 4e 1d 	jmp	0x3a9c	; 0x3a9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 12 1d 	jmp	0x3a24	; 0x3a24 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <IR_Sensor_Init>:

#include "IR_Sensor.h"
#include "gpio.h"

void IR_Sensor_Init(uint8 IR_number_OUT_PORT_ID,uint8 IR_number_OUT_PIN_ID)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <IR_Sensor_Init+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
	/* configure the OUT pin as input */
	GPIO_setupPinDirection(IR_number_OUT_PORT_ID,IR_number_OUT_PIN_ID,PIN_INPUT);
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	6a 81       	ldd	r22, Y+2	; 0x02
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <IR_Sensor_Reading>:

uint8 IR_Sensor_Reading(uint8 IR_number_OUT_PORT_ID,uint8 IR_number_OUT_PIN_ID)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <IR_Sensor_Reading+0x6>
     cc6:	0f 92       	push	r0
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	89 83       	std	Y+1, r24	; 0x01
     cce:	6a 83       	std	Y+2, r22	; 0x02
	/* if the ir sensor detect an object */
	if(GPIO_readPin(IR_number_OUT_PORT_ID,IR_number_OUT_PIN_ID)==LOGIC_LOW)
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	6a 81       	ldd	r22, Y+2	; 0x02
     cd4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <GPIO_readPin>
     cd8:	88 23       	and	r24, r24
     cda:	11 f4       	brne	.+4      	; 0xce0 <IR_Sensor_Reading+0x20>
	{
		return detect;
     cdc:	1b 82       	std	Y+3, r1	; 0x03
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <IR_Sensor_Reading+0x24>
	}
	else
	{
		return Undetect;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	8b 83       	std	Y+3, r24	; 0x03
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <DcMotors_Init>:
#include "gpio.h" /* to use GPIO_setupPinDirection and GPIO_writePin functions */
#include <avr/io.h> /* to use PORT registers */
#include "pwm.h" /* to use PWM_Timer0_Generate function to control speed of the motor */

void DcMotors_Init(void)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
     cfa:	a1 e3       	ldi	r26, 0x31	; 49
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e1 e3       	ldi	r30, 0x31	; 49
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 62       	ori	r24, 0x20	; 32
     d06:	8c 93       	st	X, r24

	/* Up_Right_DC_Motor */
	GPIO_setupPinDirection(Up_Right_DC_Motor_IN_PORT_ID,Up_Right_DC_Motor_IN1_PIN_ID,PIN_OUTPUT);
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>

    /* Up_Left_DC_Motor */
    GPIO_setupPinDirection(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN1_PIN_ID, PIN_OUTPUT);
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>

    /* Down_Right_DC_Motor */
    GPIO_setupPinDirection(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN1_PIN_ID, PIN_OUTPUT);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	66 e0       	ldi	r22, 0x06	; 6
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	67 e0       	ldi	r22, 0x07	; 7
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	66 e0       	ldi	r22, 0x06	; 6
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	67 e0       	ldi	r22, 0x07	; 7
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>

    /* Down_Left_DC_Motor */
    GPIO_setupPinDirection(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN1_PIN_ID, PIN_OUTPUT);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	66 e0       	ldi	r22, 0x06	; 6
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	67 e0       	ldi	r22, 0x07	; 7
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	66 e0       	ldi	r22, 0x06	; 6
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	67 e0       	ldi	r22, 0x07	; 7
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <Up_Right_DC_Motor_Rotate>:

void Up_Right_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	0f 92       	push	r0
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Up_Right_DC_Motor_EN_PORT_ID, Up_Right_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	63 e0       	ldi	r22, 0x03	; 3
     dbe:	41 e0       	ldi	r20, 0x01	; 1
     dc0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN1_PIN_ID, state >> 1);
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	98 2f       	mov	r25, r24
     dc8:	96 95       	lsr	r25
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	49 2f       	mov	r20, r25
     dd0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN2_PIN_ID, state & 1);
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	98 2f       	mov	r25, r24
     dd8:	91 70       	andi	r25, 0x01	; 1
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	49 2f       	mov	r20, r25
     de0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    //Timer1_Fast_PWM_Init(speed_percent);
    //PWM_Timer0_Generate(speed_percent);
}
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <Down_Right_DC_Motor_Rotate>:

void Down_Right_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Down_Right_DC_Motor_EN_PORT_ID, Down_Right_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	63 e0       	ldi	r22, 0x03	; 3
     dfc:	41 e0       	ldi	r20, 0x01	; 1
     dfe:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN1_PIN_ID, state >> 1);
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	98 2f       	mov	r25, r24
     e06:	96 95       	lsr	r25
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	66 e0       	ldi	r22, 0x06	; 6
     e0c:	49 2f       	mov	r20, r25
     e0e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN2_PIN_ID, state & 1);
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	98 2f       	mov	r25, r24
     e16:	91 70       	andi	r25, 0x01	; 1
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	67 e0       	ldi	r22, 0x07	; 7
     e1c:	49 2f       	mov	r20, r25
     e1e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    //Timer1_Fast_PWM_Init(speed_percent);
    //PWM_Timer0_Generate(speed_percent);
}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <Up_Left_DC_Motor_Rotate>:

void Up_Left_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	0f 92       	push	r0
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Up_Left_DC_Motor_EN_PORT_ID, Up_Left_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	63 e0       	ldi	r22, 0x03	; 3
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN1_PIN_ID, state >> 1);
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	98 2f       	mov	r25, r24
     e44:	96 95       	lsr	r25
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	49 2f       	mov	r20, r25
     e4c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN2_PIN_ID, state & 1);
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	98 2f       	mov	r25, r24
     e54:	91 70       	andi	r25, 0x01	; 1
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	49 2f       	mov	r20, r25
     e5c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    //PWM_Timer0_Generate(speed_percent);
    //Timer1_Fast_PWM_Init(speed_percent);
}
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Down_Left_DC_Motor_Rotate>:

void Down_Left_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Down_Left_DC_Motor_EN_PORT_ID, Down_Left_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	63 e0       	ldi	r22, 0x03	; 3
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN1_PIN_ID, state >> 1);
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	98 2f       	mov	r25, r24
     e82:	96 95       	lsr	r25
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	49 2f       	mov	r20, r25
     e8a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN2_PIN_ID, state & 1);
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	98 2f       	mov	r25, r24
     e92:	91 70       	andi	r25, 0x01	; 1
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	67 e0       	ldi	r22, 0x07	; 7
     e98:	49 2f       	mov	r20, r25
     e9a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    //PWM_Timer0_Generate(speed_percent);
    //Timer1_Fast_PWM_Init(speed_percent);
}
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <main>:
#include "Motor.c"
#include <util/delay.h> /* for delay function*/


int main()
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	c6 54       	subi	r28, 0x46	; 70
     eb0:	d0 40       	sbci	r29, 0x00	; 0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     ebc:	af e5       	ldi	r26, 0x5F	; 95
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e5       	ldi	r30, 0x5F	; 95
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24

	/* set the configuration structure of the UART frame*/
	UART_ConfigType UART_Frame={Eight_Bits,Disable_Parity,One_StopBit,9600};
     eca:	9e 01       	movw	r18, r28
     ecc:	27 5c       	subi	r18, 0xC7	; 199
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	24 96       	adiw	r28, 0x04	; 4
     ed2:	3f af       	std	Y+63, r19	; 0x3f
     ed4:	2e af       	std	Y+62, r18	; 0x3e
     ed6:	24 97       	sbiw	r28, 0x04	; 4
     ed8:	88 e6       	ldi	r24, 0x68	; 104
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	26 96       	adiw	r28, 0x06	; 6
     ede:	9f af       	std	Y+63, r25	; 0x3f
     ee0:	8e af       	std	Y+62, r24	; 0x3e
     ee2:	26 97       	sbiw	r28, 0x06	; 6
     ee4:	97 e0       	ldi	r25, 0x07	; 7
     ee6:	27 96       	adiw	r28, 0x07	; 7
     ee8:	9f af       	std	Y+63, r25	; 0x3f
     eea:	27 97       	sbiw	r28, 0x07	; 7
     eec:	26 96       	adiw	r28, 0x06	; 6
     eee:	ee ad       	ldd	r30, Y+62	; 0x3e
     ef0:	ff ad       	ldd	r31, Y+63	; 0x3f
     ef2:	26 97       	sbiw	r28, 0x06	; 6
     ef4:	00 80       	ld	r0, Z
     ef6:	26 96       	adiw	r28, 0x06	; 6
     ef8:	2e ad       	ldd	r18, Y+62	; 0x3e
     efa:	3f ad       	ldd	r19, Y+63	; 0x3f
     efc:	26 97       	sbiw	r28, 0x06	; 6
     efe:	2f 5f       	subi	r18, 0xFF	; 255
     f00:	3f 4f       	sbci	r19, 0xFF	; 255
     f02:	26 96       	adiw	r28, 0x06	; 6
     f04:	3f af       	std	Y+63, r19	; 0x3f
     f06:	2e af       	std	Y+62, r18	; 0x3e
     f08:	26 97       	sbiw	r28, 0x06	; 6
     f0a:	24 96       	adiw	r28, 0x04	; 4
     f0c:	ee ad       	ldd	r30, Y+62	; 0x3e
     f0e:	ff ad       	ldd	r31, Y+63	; 0x3f
     f10:	24 97       	sbiw	r28, 0x04	; 4
     f12:	00 82       	st	Z, r0
     f14:	24 96       	adiw	r28, 0x04	; 4
     f16:	2e ad       	ldd	r18, Y+62	; 0x3e
     f18:	3f ad       	ldd	r19, Y+63	; 0x3f
     f1a:	24 97       	sbiw	r28, 0x04	; 4
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	24 96       	adiw	r28, 0x04	; 4
     f22:	3f af       	std	Y+63, r19	; 0x3f
     f24:	2e af       	std	Y+62, r18	; 0x3e
     f26:	24 97       	sbiw	r28, 0x04	; 4
     f28:	27 96       	adiw	r28, 0x07	; 7
     f2a:	3f ad       	ldd	r19, Y+63	; 0x3f
     f2c:	27 97       	sbiw	r28, 0x07	; 7
     f2e:	31 50       	subi	r19, 0x01	; 1
     f30:	27 96       	adiw	r28, 0x07	; 7
     f32:	3f af       	std	Y+63, r19	; 0x3f
     f34:	27 97       	sbiw	r28, 0x07	; 7
     f36:	27 96       	adiw	r28, 0x07	; 7
     f38:	8f ad       	ldd	r24, Y+63	; 0x3f
     f3a:	27 97       	sbiw	r28, 0x07	; 7
     f3c:	88 23       	and	r24, r24
     f3e:	b1 f6       	brne	.-84     	; 0xeec <main+0x46>
	UART_init(&UART_Frame);
     f40:	ce 01       	movw	r24, r28
     f42:	c9 96       	adiw	r24, 0x39	; 57
     f44:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <UART_init>

	DcMotors_Init();
     f48:	0e 94 79 06 	call	0xcf2	; 0xcf2 <DcMotors_Init>
//	IR_Sensor_Init(center_IR_OUT_PORT_ID,center_IR_OUT_PIN_ID);
//	IR_Sensor_Init(right_IR_OUT_PORT_ID,right_IR_OUT_PIN_ID);
//	IR_Sensor_Init(left_IR_OUT_PORT_ID,left_IR_OUT_PIN_ID);

	/* generate the 2 pwm signals from timer 0 and timer 2*/
	PWM_Timer0_Generate(AVERAGE_SPEED); /*for the left motors*/
     f4c:	80 e5       	ldi	r24, 0x50	; 80
     f4e:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
	PWM_Timer2_Generate(AVERAGE_SPEED); /*for the right motors*/
     f52:	80 e5       	ldi	r24, 0x50	; 80
     f54:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>

	while(1)
	{
		// Recieving an instruction from Bluetooth Module
		Choice = UART_recieveByte();
     f58:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_recieveByte>
     f5c:	80 93 7f 00 	sts	0x007F, r24
		switch(Choice)
     f60:	80 91 7f 00 	lds	r24, 0x007F
     f64:	e8 2f       	mov	r30, r24
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	22 96       	adiw	r28, 0x02	; 2
     f6a:	ff af       	std	Y+63, r31	; 0x3f
     f6c:	ee af       	std	Y+62, r30	; 0x3e
     f6e:	22 97       	sbiw	r28, 0x02	; 2
     f70:	22 96       	adiw	r28, 0x02	; 2
     f72:	2e ad       	ldd	r18, Y+62	; 0x3e
     f74:	3f ad       	ldd	r19, Y+63	; 0x3f
     f76:	22 97       	sbiw	r28, 0x02	; 2
     f78:	29 34       	cpi	r18, 0x49	; 73
     f7a:	31 05       	cpc	r19, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <main+0xda>
     f7e:	84 c0       	rjmp	.+264    	; 0x1088 <main+0x1e2>
     f80:	22 96       	adiw	r28, 0x02	; 2
     f82:	8e ad       	ldd	r24, Y+62	; 0x3e
     f84:	9f ad       	ldd	r25, Y+63	; 0x3f
     f86:	22 97       	sbiw	r28, 0x02	; 2
     f88:	8a 34       	cpi	r24, 0x4A	; 74
     f8a:	91 05       	cpc	r25, r1
     f8c:	84 f5       	brge	.+96     	; 0xfee <main+0x148>
     f8e:	22 96       	adiw	r28, 0x02	; 2
     f90:	ee ad       	ldd	r30, Y+62	; 0x3e
     f92:	ff ad       	ldd	r31, Y+63	; 0x3f
     f94:	22 97       	sbiw	r28, 0x02	; 2
     f96:	e4 34       	cpi	r30, 0x44	; 68
     f98:	f1 05       	cpc	r31, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <main+0xf8>
     f9c:	e4 c1       	rjmp	.+968    	; 0x1366 <main+0x4c0>
     f9e:	22 96       	adiw	r28, 0x02	; 2
     fa0:	2e ad       	ldd	r18, Y+62	; 0x3e
     fa2:	3f ad       	ldd	r19, Y+63	; 0x3f
     fa4:	22 97       	sbiw	r28, 0x02	; 2
     fa6:	25 34       	cpi	r18, 0x45	; 69
     fa8:	31 05       	cpc	r19, r1
     faa:	8c f4       	brge	.+34     	; 0xfce <main+0x128>
     fac:	22 96       	adiw	r28, 0x02	; 2
     fae:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb2:	22 97       	sbiw	r28, 0x02	; 2
     fb4:	81 34       	cpi	r24, 0x41	; 65
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <main+0x116>
     fba:	62 c0       	rjmp	.+196    	; 0x1080 <main+0x1da>
     fbc:	22 96       	adiw	r28, 0x02	; 2
     fbe:	ee ad       	ldd	r30, Y+62	; 0x3e
     fc0:	ff ad       	ldd	r31, Y+63	; 0x3f
     fc2:	22 97       	sbiw	r28, 0x02	; 2
     fc4:	e2 34       	cpi	r30, 0x42	; 66
     fc6:	f1 05       	cpc	r31, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <main+0x126>
     fca:	42 c0       	rjmp	.+132    	; 0x1050 <main+0x1aa>
     fcc:	c5 cf       	rjmp	.-118    	; 0xf58 <main+0xb2>
     fce:	22 96       	adiw	r28, 0x02	; 2
     fd0:	2e ad       	ldd	r18, Y+62	; 0x3e
     fd2:	3f ad       	ldd	r19, Y+63	; 0x3f
     fd4:	22 97       	sbiw	r28, 0x02	; 2
     fd6:	26 34       	cpi	r18, 0x46	; 70
     fd8:	31 05       	cpc	r19, r1
     fda:	b9 f1       	breq	.+110    	; 0x104a <main+0x1a4>
     fdc:	22 96       	adiw	r28, 0x02	; 2
     fde:	8e ad       	ldd	r24, Y+62	; 0x3e
     fe0:	9f ad       	ldd	r25, Y+63	; 0x3f
     fe2:	22 97       	sbiw	r28, 0x02	; 2
     fe4:	88 34       	cpi	r24, 0x48	; 72
     fe6:	91 05       	cpc	r25, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <main+0x146>
     fea:	cb c0       	rjmp	.+406    	; 0x1182 <main+0x2dc>
     fec:	b5 cf       	rjmp	.-150    	; 0xf58 <main+0xb2>
     fee:	22 96       	adiw	r28, 0x02	; 2
     ff0:	ee ad       	ldd	r30, Y+62	; 0x3e
     ff2:	ff ad       	ldd	r31, Y+63	; 0x3f
     ff4:	22 97       	sbiw	r28, 0x02	; 2
     ff6:	e1 35       	cpi	r30, 0x51	; 81
     ff8:	f1 05       	cpc	r31, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <main+0x158>
     ffc:	49 c0       	rjmp	.+146    	; 0x1090 <main+0x1ea>
     ffe:	22 96       	adiw	r28, 0x02	; 2
    1000:	2e ad       	ldd	r18, Y+62	; 0x3e
    1002:	3f ad       	ldd	r19, Y+63	; 0x3f
    1004:	22 97       	sbiw	r28, 0x02	; 2
    1006:	22 35       	cpi	r18, 0x52	; 82
    1008:	31 05       	cpc	r19, r1
    100a:	84 f4       	brge	.+32     	; 0x102c <main+0x186>
    100c:	22 96       	adiw	r28, 0x02	; 2
    100e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1010:	9f ad       	ldd	r25, Y+63	; 0x3f
    1012:	22 97       	sbiw	r28, 0x02	; 2
    1014:	8c 34       	cpi	r24, 0x4C	; 76
    1016:	91 05       	cpc	r25, r1
    1018:	39 f1       	breq	.+78     	; 0x1068 <main+0x1c2>
    101a:	22 96       	adiw	r28, 0x02	; 2
    101c:	ee ad       	ldd	r30, Y+62	; 0x3e
    101e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1020:	22 97       	sbiw	r28, 0x02	; 2
    1022:	ed 34       	cpi	r30, 0x4D	; 77
    1024:	f1 05       	cpc	r31, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <main+0x184>
    1028:	25 c1       	rjmp	.+586    	; 0x1274 <main+0x3ce>
    102a:	96 cf       	rjmp	.-212    	; 0xf58 <main+0xb2>
    102c:	22 96       	adiw	r28, 0x02	; 2
    102e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1030:	3f ad       	ldd	r19, Y+63	; 0x3f
    1032:	22 97       	sbiw	r28, 0x02	; 2
    1034:	22 35       	cpi	r18, 0x52	; 82
    1036:	31 05       	cpc	r19, r1
    1038:	71 f0       	breq	.+28     	; 0x1056 <main+0x1b0>
    103a:	22 96       	adiw	r28, 0x02	; 2
    103c:	8e ad       	ldd	r24, Y+62	; 0x3e
    103e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1040:	22 97       	sbiw	r28, 0x02	; 2
    1042:	83 35       	cpi	r24, 0x53	; 83
    1044:	91 05       	cpc	r25, r1
    1046:	c9 f0       	breq	.+50     	; 0x107a <main+0x1d4>
    1048:	87 cf       	rjmp	.-242    	; 0xf58 <main+0xb2>
		{
			case FORWARD_CASE:
				Move_Forward();
    104a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Move_Forward>
    104e:	84 cf       	rjmp	.-248    	; 0xf58 <main+0xb2>
				break;

			case BACKWARD_CASE:
				Move_Backward();
    1050:	0e 94 3f 0a 	call	0x147e	; 0x147e <Move_Backward>
    1054:	81 cf       	rjmp	.-254    	; 0xf58 <main+0xb2>
				break;

			case RIGHT_CASE:
				PWM_Timer0_Generate(AVERAGE_SPEED); // LEFT Motors
    1056:	80 e5       	ldi	r24, 0x50	; 80
    1058:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
				PWM_Timer2_Generate(LOWEST_SPEED); //  RIGHT Motors
    105c:	84 e1       	ldi	r24, 0x14	; 20
    105e:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>
				Move_Right();
    1062:	0e 94 65 0a 	call	0x14ca	; 0x14ca <Move_Right>
    1066:	78 cf       	rjmp	.-272    	; 0xf58 <main+0xb2>
				break;

			case LEFT_CASE:
				PWM_Timer0_Generate(LOWEST_SPEED);	  // LEFT Motors
    1068:	84 e1       	ldi	r24, 0x14	; 20
    106a:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
				PWM_Timer2_Generate(AVERAGE_SPEED);  //  RIGHT Motors
    106e:	80 e5       	ldi	r24, 0x50	; 80
    1070:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>
				Move_Left();
    1074:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <Move_Left>
    1078:	6f cf       	rjmp	.-290    	; 0xf58 <main+0xb2>
				break;

			case STOP_CASE:
				Stop();
    107a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <Stop>
    107e:	6c cf       	rjmp	.-296    	; 0xf58 <main+0xb2>
				break;

			// Change The Mode to Automatic Mode
			case AUTO_MODE:
				AutoMode = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 70 00 	sts	0x0070, r24
    1086:	68 cf       	rjmp	.-304    	; 0xf58 <main+0xb2>
				break;

			// Change The Mode to Line Follower Mode
			case LINE_FOLLOWER_MODE:
				Line_Follower_Mode = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 71 00 	sts	0x0071, r24
    108e:	64 cf       	rjmp	.-312    	; 0xf58 <main+0xb2>
				break;

			case MINIMUM_SPEED_PWM:
				PWM_Timer0_Generate(MINIMUM_SPEED);
    1090:	88 e2       	ldi	r24, 0x28	; 40
    1092:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
				PWM_Timer2_Generate(MINIMUM_SPEED);
    1096:	88 e2       	ldi	r24, 0x28	; 40
    1098:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a0 e2       	ldi	r26, 0x20	; 32
    10a2:	b1 e4       	ldi	r27, 0x41	; 65
    10a4:	8d ab       	std	Y+53, r24	; 0x35
    10a6:	9e ab       	std	Y+54, r25	; 0x36
    10a8:	af ab       	std	Y+55, r26	; 0x37
    10aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ac:	6d a9       	ldd	r22, Y+53	; 0x35
    10ae:	7e a9       	ldd	r23, Y+54	; 0x36
    10b0:	8f a9       	ldd	r24, Y+55	; 0x37
    10b2:	98 ad       	ldd	r25, Y+56	; 0x38
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	4a ef       	ldi	r20, 0xFA	; 250
    10ba:	54 e4       	ldi	r21, 0x44	; 68
    10bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	89 ab       	std	Y+49, r24	; 0x31
    10c6:	9a ab       	std	Y+50, r25	; 0x32
    10c8:	ab ab       	std	Y+51, r26	; 0x33
    10ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10cc:	69 a9       	ldd	r22, Y+49	; 0x31
    10ce:	7a a9       	ldd	r23, Y+50	; 0x32
    10d0:	8b a9       	ldd	r24, Y+51	; 0x33
    10d2:	9c a9       	ldd	r25, Y+52	; 0x34
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	2c f4       	brge	.+10     	; 0x10ee <main+0x248>
		__ticks = 1;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	98 ab       	std	Y+48, r25	; 0x30
    10ea:	8f a7       	std	Y+47, r24	; 0x2f
    10ec:	3f c0       	rjmp	.+126    	; 0x116c <main+0x2c6>
	else if (__tmp > 65535)
    10ee:	69 a9       	ldd	r22, Y+49	; 0x31
    10f0:	7a a9       	ldd	r23, Y+50	; 0x32
    10f2:	8b a9       	ldd	r24, Y+51	; 0x33
    10f4:	9c a9       	ldd	r25, Y+52	; 0x34
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	3f ef       	ldi	r19, 0xFF	; 255
    10fa:	4f e7       	ldi	r20, 0x7F	; 127
    10fc:	57 e4       	ldi	r21, 0x47	; 71
    10fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1102:	18 16       	cp	r1, r24
    1104:	4c f5       	brge	.+82     	; 0x1158 <main+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1106:	6d a9       	ldd	r22, Y+53	; 0x35
    1108:	7e a9       	ldd	r23, Y+54	; 0x36
    110a:	8f a9       	ldd	r24, Y+55	; 0x37
    110c:	98 ad       	ldd	r25, Y+56	; 0x38
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e2       	ldi	r20, 0x20	; 32
    1114:	51 e4       	ldi	r21, 0x41	; 65
    1116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	98 ab       	std	Y+48, r25	; 0x30
    112c:	8f a7       	std	Y+47, r24	; 0x2f
    112e:	0f c0       	rjmp	.+30     	; 0x114e <main+0x2a8>
    1130:	88 ec       	ldi	r24, 0xC8	; 200
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9e a7       	std	Y+46, r25	; 0x2e
    1136:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1138:	8d a5       	ldd	r24, Y+45	; 0x2d
    113a:	9e a5       	ldd	r25, Y+46	; 0x2e
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	f1 f7       	brne	.-4      	; 0x113c <main+0x296>
    1140:	9e a7       	std	Y+46, r25	; 0x2e
    1142:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1144:	8f a5       	ldd	r24, Y+47	; 0x2f
    1146:	98 a9       	ldd	r25, Y+48	; 0x30
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	98 ab       	std	Y+48, r25	; 0x30
    114c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1150:	98 a9       	ldd	r25, Y+48	; 0x30
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	69 f7       	brne	.-38     	; 0x1130 <main+0x28a>
    1156:	00 cf       	rjmp	.-512    	; 0xf58 <main+0xb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1158:	69 a9       	ldd	r22, Y+49	; 0x31
    115a:	7a a9       	ldd	r23, Y+50	; 0x32
    115c:	8b a9       	ldd	r24, Y+51	; 0x33
    115e:	9c a9       	ldd	r25, Y+52	; 0x34
    1160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	98 ab       	std	Y+48, r25	; 0x30
    116a:	8f a7       	std	Y+47, r24	; 0x2f
    116c:	8f a5       	ldd	r24, Y+47	; 0x2f
    116e:	98 a9       	ldd	r25, Y+48	; 0x30
    1170:	9c a7       	std	Y+44, r25	; 0x2c
    1172:	8b a7       	std	Y+43, r24	; 0x2b
    1174:	8b a5       	ldd	r24, Y+43	; 0x2b
    1176:	9c a5       	ldd	r25, Y+44	; 0x2c
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <main+0x2d2>
    117c:	9c a7       	std	Y+44, r25	; 0x2c
    117e:	8b a7       	std	Y+43, r24	; 0x2b
    1180:	eb ce       	rjmp	.-554    	; 0xf58 <main+0xb2>
				_delay_ms(10);
				break;

			case MAXIMUM_SPEED_PWM:
				PWM_Timer0_Generate(MAXIMUM_SPEED);
    1182:	8a e5       	ldi	r24, 0x5A	; 90
    1184:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
				PWM_Timer2_Generate(MAXIMUM_SPEED);
    1188:	8a e5       	ldi	r24, 0x5A	; 90
    118a:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a0 e2       	ldi	r26, 0x20	; 32
    1194:	b1 e4       	ldi	r27, 0x41	; 65
    1196:	8f a3       	std	Y+39, r24	; 0x27
    1198:	98 a7       	std	Y+40, r25	; 0x28
    119a:	a9 a7       	std	Y+41, r26	; 0x29
    119c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119e:	6f a1       	ldd	r22, Y+39	; 0x27
    11a0:	78 a5       	ldd	r23, Y+40	; 0x28
    11a2:	89 a5       	ldd	r24, Y+41	; 0x29
    11a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	4a ef       	ldi	r20, 0xFA	; 250
    11ac:	54 e4       	ldi	r21, 0x44	; 68
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	8b a3       	std	Y+35, r24	; 0x23
    11b8:	9c a3       	std	Y+36, r25	; 0x24
    11ba:	ad a3       	std	Y+37, r26	; 0x25
    11bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11be:	6b a1       	ldd	r22, Y+35	; 0x23
    11c0:	7c a1       	ldd	r23, Y+36	; 0x24
    11c2:	8d a1       	ldd	r24, Y+37	; 0x25
    11c4:	9e a1       	ldd	r25, Y+38	; 0x26
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	5f e3       	ldi	r21, 0x3F	; 63
    11ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <main+0x33a>
		__ticks = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9a a3       	std	Y+34, r25	; 0x22
    11dc:	89 a3       	std	Y+33, r24	; 0x21
    11de:	3f c0       	rjmp	.+126    	; 0x125e <main+0x3b8>
	else if (__tmp > 65535)
    11e0:	6b a1       	ldd	r22, Y+35	; 0x23
    11e2:	7c a1       	ldd	r23, Y+36	; 0x24
    11e4:	8d a1       	ldd	r24, Y+37	; 0x25
    11e6:	9e a1       	ldd	r25, Y+38	; 0x26
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	4f e7       	ldi	r20, 0x7F	; 127
    11ee:	57 e4       	ldi	r21, 0x47	; 71
    11f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11f4:	18 16       	cp	r1, r24
    11f6:	4c f5       	brge	.+82     	; 0x124a <main+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f8:	6f a1       	ldd	r22, Y+39	; 0x27
    11fa:	78 a5       	ldd	r23, Y+40	; 0x28
    11fc:	89 a5       	ldd	r24, Y+41	; 0x29
    11fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e2       	ldi	r20, 0x20	; 32
    1206:	51 e4       	ldi	r21, 0x41	; 65
    1208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9a a3       	std	Y+34, r25	; 0x22
    121e:	89 a3       	std	Y+33, r24	; 0x21
    1220:	0f c0       	rjmp	.+30     	; 0x1240 <main+0x39a>
    1222:	88 ec       	ldi	r24, 0xC8	; 200
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	98 a3       	std	Y+32, r25	; 0x20
    1228:	8f 8f       	std	Y+31, r24	; 0x1f
    122a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    122c:	98 a1       	ldd	r25, Y+32	; 0x20
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <main+0x388>
    1232:	98 a3       	std	Y+32, r25	; 0x20
    1234:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	89 a1       	ldd	r24, Y+33	; 0x21
    1238:	9a a1       	ldd	r25, Y+34	; 0x22
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	9a a3       	std	Y+34, r25	; 0x22
    123e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1240:	89 a1       	ldd	r24, Y+33	; 0x21
    1242:	9a a1       	ldd	r25, Y+34	; 0x22
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	69 f7       	brne	.-38     	; 0x1222 <main+0x37c>
    1248:	87 ce       	rjmp	.-754    	; 0xf58 <main+0xb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124a:	6b a1       	ldd	r22, Y+35	; 0x23
    124c:	7c a1       	ldd	r23, Y+36	; 0x24
    124e:	8d a1       	ldd	r24, Y+37	; 0x25
    1250:	9e a1       	ldd	r25, Y+38	; 0x26
    1252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	9a a3       	std	Y+34, r25	; 0x22
    125c:	89 a3       	std	Y+33, r24	; 0x21
    125e:	89 a1       	ldd	r24, Y+33	; 0x21
    1260:	9a a1       	ldd	r25, Y+34	; 0x22
    1262:	9e 8f       	std	Y+30, r25	; 0x1e
    1264:	8d 8f       	std	Y+29, r24	; 0x1d
    1266:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1268:	9e 8d       	ldd	r25, Y+30	; 0x1e
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <main+0x3c4>
    126e:	9e 8f       	std	Y+30, r25	; 0x1e
    1270:	8d 8f       	std	Y+29, r24	; 0x1d
    1272:	72 ce       	rjmp	.-796    	; 0xf58 <main+0xb2>
				_delay_ms(10);
				break;

			case AVERAGE_SPEED_PWM:
				PWM_Timer0_Generate(AVERAGE_SPEED);
    1274:	80 e5       	ldi	r24, 0x50	; 80
    1276:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
				PWM_Timer2_Generate(AVERAGE_SPEED);
    127a:	80 e5       	ldi	r24, 0x50	; 80
    127c:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e2       	ldi	r26, 0x20	; 32
    1286:	b1 e4       	ldi	r27, 0x41	; 65
    1288:	89 8f       	std	Y+25, r24	; 0x19
    128a:	9a 8f       	std	Y+26, r25	; 0x1a
    128c:	ab 8f       	std	Y+27, r26	; 0x1b
    128e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1290:	69 8d       	ldd	r22, Y+25	; 0x19
    1292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a ef       	ldi	r20, 0xFA	; 250
    129e:	54 e4       	ldi	r21, 0x44	; 68
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8d 8b       	std	Y+21, r24	; 0x15
    12aa:	9e 8b       	std	Y+22, r25	; 0x16
    12ac:	af 8b       	std	Y+23, r26	; 0x17
    12ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b0:	6d 89       	ldd	r22, Y+21	; 0x15
    12b2:	7e 89       	ldd	r23, Y+22	; 0x16
    12b4:	8f 89       	ldd	r24, Y+23	; 0x17
    12b6:	98 8d       	ldd	r25, Y+24	; 0x18
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <main+0x42c>
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c 8b       	std	Y+20, r25	; 0x14
    12ce:	8b 8b       	std	Y+19, r24	; 0x13
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <main+0x4aa>
	else if (__tmp > 65535)
    12d2:	6d 89       	ldd	r22, Y+21	; 0x15
    12d4:	7e 89       	ldd	r23, Y+22	; 0x16
    12d6:	8f 89       	ldd	r24, Y+23	; 0x17
    12d8:	98 8d       	ldd	r25, Y+24	; 0x18
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	57 e4       	ldi	r21, 0x47	; 71
    12e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	4c f5       	brge	.+82     	; 0x133c <main+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	69 8d       	ldd	r22, Y+25	; 0x19
    12ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9c 8b       	std	Y+20, r25	; 0x14
    1310:	8b 8b       	std	Y+19, r24	; 0x13
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <main+0x48c>
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9a 8b       	std	Y+18, r25	; 0x12
    131a:	89 8b       	std	Y+17, r24	; 0x11
    131c:	89 89       	ldd	r24, Y+17	; 0x11
    131e:	9a 89       	ldd	r25, Y+18	; 0x12
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <main+0x47a>
    1324:	9a 8b       	std	Y+18, r25	; 0x12
    1326:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	8b 89       	ldd	r24, Y+19	; 0x13
    132a:	9c 89       	ldd	r25, Y+20	; 0x14
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	9c 8b       	std	Y+20, r25	; 0x14
    1330:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	8b 89       	ldd	r24, Y+19	; 0x13
    1334:	9c 89       	ldd	r25, Y+20	; 0x14
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f7       	brne	.-38     	; 0x1314 <main+0x46e>
    133a:	0e ce       	rjmp	.-996    	; 0xf58 <main+0xb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	6d 89       	ldd	r22, Y+21	; 0x15
    133e:	7e 89       	ldd	r23, Y+22	; 0x16
    1340:	8f 89       	ldd	r24, Y+23	; 0x17
    1342:	98 8d       	ldd	r25, Y+24	; 0x18
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9c 8b       	std	Y+20, r25	; 0x14
    134e:	8b 8b       	std	Y+19, r24	; 0x13
    1350:	8b 89       	ldd	r24, Y+19	; 0x13
    1352:	9c 89       	ldd	r25, Y+20	; 0x14
    1354:	98 8b       	std	Y+16, r25	; 0x10
    1356:	8f 87       	std	Y+15, r24	; 0x0f
    1358:	8f 85       	ldd	r24, Y+15	; 0x0f
    135a:	98 89       	ldd	r25, Y+16	; 0x10
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <main+0x4b6>
    1360:	98 8b       	std	Y+16, r25	; 0x10
    1362:	8f 87       	std	Y+15, r24	; 0x0f
    1364:	f9 cd       	rjmp	.-1038   	; 0xf58 <main+0xb2>
				_delay_ms(10);
				break;

			case DEFAULT_SPEED_PWM:
				PWM_Timer0_Generate(DEFAULT_SPEED_PWM);
    1366:	84 e4       	ldi	r24, 0x44	; 68
    1368:	0e 94 03 19 	call	0x3206	; 0x3206 <PWM_Timer0_Generate>
				PWM_Timer2_Generate(DEFAULT_SPEED_PWM);
    136c:	84 e4       	ldi	r24, 0x44	; 68
    136e:	0e 94 3f 19 	call	0x327e	; 0x327e <PWM_Timer2_Generate>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a0 e2       	ldi	r26, 0x20	; 32
    1378:	b1 e4       	ldi	r27, 0x41	; 65
    137a:	8b 87       	std	Y+11, r24	; 0x0b
    137c:	9c 87       	std	Y+12, r25	; 0x0c
    137e:	ad 87       	std	Y+13, r26	; 0x0d
    1380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	6b 85       	ldd	r22, Y+11	; 0x0b
    1384:	7c 85       	ldd	r23, Y+12	; 0x0c
    1386:	8d 85       	ldd	r24, Y+13	; 0x0d
    1388:	9e 85       	ldd	r25, Y+14	; 0x0e
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a ef       	ldi	r20, 0xFA	; 250
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	8f 83       	std	Y+7, r24	; 0x07
    139c:	98 87       	std	Y+8, r25	; 0x08
    139e:	a9 87       	std	Y+9, r26	; 0x09
    13a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a2:	6f 81       	ldd	r22, Y+7	; 0x07
    13a4:	78 85       	ldd	r23, Y+8	; 0x08
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <main+0x51e>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <main+0x59c>
	else if (__tmp > 65535)
    13c4:	6f 81       	ldd	r22, Y+7	; 0x07
    13c6:	78 85       	ldd	r23, Y+8	; 0x08
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13d8:	18 16       	cp	r1, r24
    13da:	4c f5       	brge	.+82     	; 0x142e <main+0x588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13de:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <main+0x57e>
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9c 83       	std	Y+4, r25	; 0x04
    140c:	8b 83       	std	Y+3, r24	; 0x03
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <main+0x56c>
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f7       	brne	.-38     	; 0x1406 <main+0x560>
    142c:	95 cd       	rjmp	.-1238   	; 0xf58 <main+0xb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <main+0x5a8>
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	80 cd       	rjmp	.-1280   	; 0xf58 <main+0xb2>

00001458 <Move_Forward>:
			 }
		}

/*operate all the motors with the same speed and clockwise*/
void Move_Forward(void)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_CW);
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	0e 94 d7 06 	call	0xdae	; 0xdae <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_CW);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	0e 94 f6 06 	call	0xdec	; 0xdec <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_CW);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 15 07 	call	0xe2a	; 0xe2a <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_CW);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	0e 94 34 07 	call	0xe68	; 0xe68 <Down_Left_DC_Motor_Rotate>
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <Move_Backward>:

/*operate all the motors with the same speed and anti-clockwise*/
void Move_Backward(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_A_CW);
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	0e 94 d7 06 	call	0xdae	; 0xdae <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_A_CW);
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	0e 94 f6 06 	call	0xdec	; 0xdec <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_A_CW);
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	0e 94 15 07 	call	0xe2a	; 0xe2a <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_A_CW);
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	0e 94 34 07 	call	0xe68	; 0xe68 <Down_Left_DC_Motor_Rotate>
}
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <Move_Left>:

  /* operate the left motors with the lower speed and clockwise
  * and the right motors with the higher speed and also clockwise*/
void Move_Left(void)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_CW);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	0e 94 d7 06 	call	0xdae	; 0xdae <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_CW);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 f6 06 	call	0xdec	; 0xdec <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_A_CW);
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	0e 94 15 07 	call	0xe2a	; 0xe2a <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_A_CW);
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	0e 94 34 07 	call	0xe68	; 0xe68 <Down_Left_DC_Motor_Rotate>
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <Move_Right>:

/* operate the right motors with the lower speed and clockwise
 * and the left motors with the higher speed and also clockwise
 * */
void Move_Right(void)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_A_CW);
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	0e 94 d7 06 	call	0xdae	; 0xdae <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_A_CW);
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 f6 06 	call	0xdec	; 0xdec <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_CW);
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 15 07 	call	0xe2a	; 0xe2a <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_CW);
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	0e 94 34 07 	call	0xe68	; 0xe68 <Down_Left_DC_Motor_Rotate>
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <Stop>:

/*stop all the motors*/
void Stop(void)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_OFF);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	0e 94 d7 06 	call	0xdae	; 0xdae <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_OFF);
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0e 94 f6 06 	call	0xdec	; 0xdec <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_OFF);
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	0e 94 15 07 	call	0xe2a	; 0xe2a <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_OFF);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 34 07 	call	0xe68	; 0xe68 <Down_Left_DC_Motor_Rotate>
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <GPIO_setupPinDirection+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <GPIO_setupPinDirection+0x8>
    151e:	0f 92       	push	r0
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	6a 83       	std	Y+2, r22	; 0x02
    1528:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 30       	cpi	r24, 0x08	; 8
    152e:	08 f0       	brcs	.+2      	; 0x1532 <GPIO_setupPinDirection+0x1c>
    1530:	d5 c0       	rjmp	.+426    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	08 f0       	brcs	.+2      	; 0x153a <GPIO_setupPinDirection+0x24>
    1538:	d1 c0       	rjmp	.+418    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 83       	std	Y+5, r19	; 0x05
    1542:	2c 83       	std	Y+4, r18	; 0x04
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <GPIO_setupPinDirection+0x3a>
    154e:	43 c0       	rjmp	.+134    	; 0x15d6 <GPIO_setupPinDirection+0xc0>
    1550:	2c 81       	ldd	r18, Y+4	; 0x04
    1552:	3d 81       	ldd	r19, Y+5	; 0x05
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	2c f4       	brge	.+10     	; 0x1564 <GPIO_setupPinDirection+0x4e>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	71 f0       	breq	.+28     	; 0x157e <GPIO_setupPinDirection+0x68>
    1562:	bc c0       	rjmp	.+376    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	3d 81       	ldd	r19, Y+5	; 0x05
    1568:	22 30       	cpi	r18, 0x02	; 2
    156a:	31 05       	cpc	r19, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <GPIO_setupPinDirection+0x5a>
    156e:	5f c0       	rjmp	.+190    	; 0x162e <GPIO_setupPinDirection+0x118>
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <GPIO_setupPinDirection+0x66>
    157a:	85 c0       	rjmp	.+266    	; 0x1686 <GPIO_setupPinDirection+0x170>
    157c:	af c0       	rjmp	.+350    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	a1 f4       	brne	.+40     	; 0x15ac <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1584:	aa e3       	ldi	r26, 0x3A	; 58
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	ea e3       	ldi	r30, 0x3A	; 58
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GPIO_setupPinDirection+0x8c>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GPIO_setupPinDirection+0x88>
    15a6:	84 2b       	or	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	98 c0       	rjmp	.+304    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15ac:	aa e3       	ldi	r26, 0x3A	; 58
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ea e3       	ldi	r30, 0x3A	; 58
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <GPIO_setupPinDirection+0xb4>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <GPIO_setupPinDirection+0xb0>
    15ce:	80 95       	com	r24
    15d0:	84 23       	and	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	83 c0       	rjmp	.+262    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	a1 f4       	brne	.+40     	; 0x1604 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15dc:	a7 e3       	ldi	r26, 0x37	; 55
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e7 e3       	ldi	r30, 0x37	; 55
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_setupPinDirection+0xe4>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_setupPinDirection+0xe0>
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	6c c0       	rjmp	.+216    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1604:	a7 e3       	ldi	r26, 0x37	; 55
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e7 e3       	ldi	r30, 0x37	; 55
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_setupPinDirection+0x10c>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_setupPinDirection+0x108>
    1626:	80 95       	com	r24
    1628:	84 23       	and	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	57 c0       	rjmp	.+174    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	a1 f4       	brne	.+40     	; 0x165c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1634:	a4 e3       	ldi	r26, 0x34	; 52
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e4 e3       	ldi	r30, 0x34	; 52
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GPIO_setupPinDirection+0x13c>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <GPIO_setupPinDirection+0x138>
    1656:	84 2b       	or	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	40 c0       	rjmp	.+128    	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    165c:	a4 e3       	ldi	r26, 0x34	; 52
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e4 e3       	ldi	r30, 0x34	; 52
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_setupPinDirection+0x164>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_setupPinDirection+0x160>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	2b c0       	rjmp	.+86     	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	a1 f4       	brne	.+40     	; 0x16b4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    168c:	a1 e3       	ldi	r26, 0x31	; 49
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e1 e3       	ldi	r30, 0x31	; 49
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <GPIO_setupPinDirection+0x194>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <GPIO_setupPinDirection+0x190>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16b4:	a1 e3       	ldi	r26, 0x31	; 49
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e1 e3       	ldi	r30, 0x31	; 49
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GPIO_setupPinDirection+0x1bc>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <GPIO_setupPinDirection+0x1b8>
    16d6:	80 95       	com	r24
    16d8:	84 23       	and	r24, r20
    16da:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <GPIO_writePin+0x6>
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <GPIO_writePin+0x8>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	6a 83       	std	Y+2, r22	; 0x02
    16fe:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 30       	cpi	r24, 0x08	; 8
    1704:	08 f0       	brcs	.+2      	; 0x1708 <GPIO_writePin+0x1c>
    1706:	d5 c0       	rjmp	.+426    	; 0x18b2 <GPIO_writePin+0x1c6>
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	08 f0       	brcs	.+2      	; 0x1710 <GPIO_writePin+0x24>
    170e:	d1 c0       	rjmp	.+418    	; 0x18b2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3d 83       	std	Y+5, r19	; 0x05
    1718:	2c 83       	std	Y+4, r18	; 0x04
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <GPIO_writePin+0x3a>
    1724:	43 c0       	rjmp	.+134    	; 0x17ac <GPIO_writePin+0xc0>
    1726:	2c 81       	ldd	r18, Y+4	; 0x04
    1728:	3d 81       	ldd	r19, Y+5	; 0x05
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	2c f4       	brge	.+10     	; 0x173a <GPIO_writePin+0x4e>
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	71 f0       	breq	.+28     	; 0x1754 <GPIO_writePin+0x68>
    1738:	bc c0       	rjmp	.+376    	; 0x18b2 <GPIO_writePin+0x1c6>
    173a:	2c 81       	ldd	r18, Y+4	; 0x04
    173c:	3d 81       	ldd	r19, Y+5	; 0x05
    173e:	22 30       	cpi	r18, 0x02	; 2
    1740:	31 05       	cpc	r19, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <GPIO_writePin+0x5a>
    1744:	5f c0       	rjmp	.+190    	; 0x1804 <GPIO_writePin+0x118>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	83 30       	cpi	r24, 0x03	; 3
    174c:	91 05       	cpc	r25, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <GPIO_writePin+0x66>
    1750:	85 c0       	rjmp	.+266    	; 0x185c <GPIO_writePin+0x170>
    1752:	af c0       	rjmp	.+350    	; 0x18b2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	a1 f4       	brne	.+40     	; 0x1782 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    175a:	ab e3       	ldi	r26, 0x3B	; 59
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e3       	ldi	r30, 0x3B	; 59
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_writePin+0x8c>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_writePin+0x88>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	98 c0       	rjmp	.+304    	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1782:	ab e3       	ldi	r26, 0x3B	; 59
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	eb e3       	ldi	r30, 0x3B	; 59
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_writePin+0xb4>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_writePin+0xb0>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	83 c0       	rjmp	.+262    	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	a1 f4       	brne	.+40     	; 0x17da <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17b2:	a8 e3       	ldi	r26, 0x38	; 56
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e8 e3       	ldi	r30, 0x38	; 56
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GPIO_writePin+0xe4>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <GPIO_writePin+0xe0>
    17d4:	84 2b       	or	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	6c c0       	rjmp	.+216    	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17da:	a8 e3       	ldi	r26, 0x38	; 56
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e8 e3       	ldi	r30, 0x38	; 56
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <GPIO_writePin+0x10c>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <GPIO_writePin+0x108>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	57 c0       	rjmp	.+174    	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	a1 f4       	brne	.+40     	; 0x1832 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    180a:	a5 e3       	ldi	r26, 0x35	; 53
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e3       	ldi	r30, 0x35	; 53
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <GPIO_writePin+0x13c>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <GPIO_writePin+0x138>
    182c:	84 2b       	or	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	40 c0       	rjmp	.+128    	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1832:	a5 e3       	ldi	r26, 0x35	; 53
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e3       	ldi	r30, 0x35	; 53
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <GPIO_writePin+0x164>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <GPIO_writePin+0x160>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	2b c0       	rjmp	.+86     	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	a1 f4       	brne	.+40     	; 0x188a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1862:	a2 e3       	ldi	r26, 0x32	; 50
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e2 e3       	ldi	r30, 0x32	; 50
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <GPIO_writePin+0x194>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <GPIO_writePin+0x190>
    1884:	84 2b       	or	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    188a:	a2 e3       	ldi	r26, 0x32	; 50
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e2 e3       	ldi	r30, 0x32	; 50
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_writePin+0x1bc>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_writePin+0x1b8>
    18ac:	80 95       	com	r24
    18ae:	84 23       	and	r24, r20
    18b0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <GPIO_readPin+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <GPIO_readPin+0x8>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18d4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 30       	cpi	r24, 0x08	; 8
    18da:	08 f0       	brcs	.+2      	; 0x18de <GPIO_readPin+0x1c>
    18dc:	84 c0       	rjmp	.+264    	; 0x19e6 <GPIO_readPin+0x124>
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <GPIO_readPin+0x24>
    18e4:	80 c0       	rjmp	.+256    	; 0x19e6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3d 83       	std	Y+5, r19	; 0x05
    18ee:	2c 83       	std	Y+4, r18	; 0x04
    18f0:	4c 81       	ldd	r20, Y+4	; 0x04
    18f2:	5d 81       	ldd	r21, Y+5	; 0x05
    18f4:	41 30       	cpi	r20, 0x01	; 1
    18f6:	51 05       	cpc	r21, r1
    18f8:	79 f1       	breq	.+94     	; 0x1958 <GPIO_readPin+0x96>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	91 05       	cpc	r25, r1
    1902:	34 f4       	brge	.+12     	; 0x1910 <GPIO_readPin+0x4e>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	69 f0       	breq	.+26     	; 0x1928 <GPIO_readPin+0x66>
    190e:	6b c0       	rjmp	.+214    	; 0x19e6 <GPIO_readPin+0x124>
    1910:	4c 81       	ldd	r20, Y+4	; 0x04
    1912:	5d 81       	ldd	r21, Y+5	; 0x05
    1914:	42 30       	cpi	r20, 0x02	; 2
    1916:	51 05       	cpc	r21, r1
    1918:	b9 f1       	breq	.+110    	; 0x1988 <GPIO_readPin+0xc6>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <GPIO_readPin+0x64>
    1924:	49 c0       	rjmp	.+146    	; 0x19b8 <GPIO_readPin+0xf6>
    1926:	5f c0       	rjmp	.+190    	; 0x19e6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1928:	e9 e3       	ldi	r30, 0x39	; 57
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_readPin+0x7e>
    193c:	55 95       	asr	r21
    193e:	47 95       	ror	r20
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_readPin+0x7a>
    1944:	ca 01       	movw	r24, r20
    1946:	81 70       	andi	r24, 0x01	; 1
    1948:	90 70       	andi	r25, 0x00	; 0
    194a:	88 23       	and	r24, r24
    194c:	19 f0       	breq	.+6      	; 0x1954 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	49 c0       	rjmp	.+146    	; 0x19e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1954:	19 82       	std	Y+1, r1	; 0x01
    1956:	47 c0       	rjmp	.+142    	; 0x19e6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1958:	e6 e3       	ldi	r30, 0x36	; 54
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_readPin+0xae>
    196c:	55 95       	asr	r21
    196e:	47 95       	ror	r20
    1970:	8a 95       	dec	r24
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_readPin+0xaa>
    1974:	ca 01       	movw	r24, r20
    1976:	81 70       	andi	r24, 0x01	; 1
    1978:	90 70       	andi	r25, 0x00	; 0
    197a:	88 23       	and	r24, r24
    197c:	19 f0       	breq	.+6      	; 0x1984 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	31 c0       	rjmp	.+98     	; 0x19e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1984:	19 82       	std	Y+1, r1	; 0x01
    1986:	2f c0       	rjmp	.+94     	; 0x19e6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1988:	e3 e3       	ldi	r30, 0x33	; 51
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a9 01       	movw	r20, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_readPin+0xde>
    199c:	55 95       	asr	r21
    199e:	47 95       	ror	r20
    19a0:	8a 95       	dec	r24
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_readPin+0xda>
    19a4:	ca 01       	movw	r24, r20
    19a6:	81 70       	andi	r24, 0x01	; 1
    19a8:	90 70       	andi	r25, 0x00	; 0
    19aa:	88 23       	and	r24, r24
    19ac:	19 f0       	breq	.+6      	; 0x19b4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	19 c0       	rjmp	.+50     	; 0x19e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	17 c0       	rjmp	.+46     	; 0x19e6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19b8:	e0 e3       	ldi	r30, 0x30	; 48
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a9 01       	movw	r20, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_readPin+0x10e>
    19cc:	55 95       	asr	r21
    19ce:	47 95       	ror	r20
    19d0:	8a 95       	dec	r24
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_readPin+0x10a>
    19d4:	ca 01       	movw	r24, r20
    19d6:	81 70       	andi	r24, 0x01	; 1
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	88 23       	and	r24, r24
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19e4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <GPIO_setupPortDirection+0x6>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <GPIO_setupPortDirection+0x8>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	84 30       	cpi	r24, 0x04	; 4
    1a0c:	90 f5       	brcc	.+100    	; 0x1a72 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	3c 83       	std	Y+4, r19	; 0x04
    1a16:	2b 83       	std	Y+3, r18	; 0x03
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	91 05       	cpc	r25, r1
    1a20:	d1 f0       	breq	.+52     	; 0x1a56 <GPIO_setupPortDirection+0x5e>
    1a22:	2b 81       	ldd	r18, Y+3	; 0x03
    1a24:	3c 81       	ldd	r19, Y+4	; 0x04
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	2c f4       	brge	.+10     	; 0x1a36 <GPIO_setupPortDirection+0x3e>
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <GPIO_setupPortDirection+0x54>
    1a34:	1e c0       	rjmp	.+60     	; 0x1a72 <GPIO_setupPortDirection+0x7a>
    1a36:	2b 81       	ldd	r18, Y+3	; 0x03
    1a38:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	81 f0       	breq	.+32     	; 0x1a60 <GPIO_setupPortDirection+0x68>
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	91 05       	cpc	r25, r1
    1a48:	81 f0       	breq	.+32     	; 0x1a6a <GPIO_setupPortDirection+0x72>
    1a4a:	13 c0       	rjmp	.+38     	; 0x1a72 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a4c:	ea e3       	ldi	r30, 0x3A	; 58
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 83       	st	Z, r24
    1a54:	0e c0       	rjmp	.+28     	; 0x1a72 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a56:	e7 e3       	ldi	r30, 0x37	; 55
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	80 83       	st	Z, r24
    1a5e:	09 c0       	rjmp	.+18     	; 0x1a72 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a60:	e4 e3       	ldi	r30, 0x34	; 52
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	80 83       	st	Z, r24
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <GPIO_writePort+0x6>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <GPIO_writePort+0x8>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	84 30       	cpi	r24, 0x04	; 4
    1a94:	90 f5       	brcc	.+100    	; 0x1afa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3c 83       	std	Y+4, r19	; 0x04
    1a9e:	2b 83       	std	Y+3, r18	; 0x03
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	d1 f0       	breq	.+52     	; 0x1ade <GPIO_writePort+0x5e>
    1aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    1aac:	3c 81       	ldd	r19, Y+4	; 0x04
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <GPIO_writePort+0x3e>
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <GPIO_writePort+0x54>
    1abc:	1e c0       	rjmp	.+60     	; 0x1afa <GPIO_writePort+0x7a>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	81 f0       	breq	.+32     	; 0x1ae8 <GPIO_writePort+0x68>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <GPIO_writePort+0x72>
    1ad2:	13 c0       	rjmp	.+38     	; 0x1afa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	80 83       	st	Z, r24
    1adc:	0e c0       	rjmp	.+28     	; 0x1afa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ade:	e8 e3       	ldi	r30, 0x38	; 56
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	80 83       	st	Z, r24
    1ae6:	09 c0       	rjmp	.+18     	; 0x1afa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ae8:	e5 e3       	ldi	r30, 0x35	; 53
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	80 83       	st	Z, r24
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1af2:	e2 e3       	ldi	r30, 0x32	; 50
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <GPIO_readPort+0x6>
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <GPIO_readPort+0x8>
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b16:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	84 30       	cpi	r24, 0x04	; 4
    1b1c:	90 f5       	brcc	.+100    	; 0x1b82 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	3c 83       	std	Y+4, r19	; 0x04
    1b26:	2b 83       	std	Y+3, r18	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	d1 f0       	breq	.+52     	; 0x1b66 <GPIO_readPort+0x5e>
    1b32:	2b 81       	ldd	r18, Y+3	; 0x03
    1b34:	3c 81       	ldd	r19, Y+4	; 0x04
    1b36:	22 30       	cpi	r18, 0x02	; 2
    1b38:	31 05       	cpc	r19, r1
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <GPIO_readPort+0x3e>
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <GPIO_readPort+0x54>
    1b44:	1e c0       	rjmp	.+60     	; 0x1b82 <GPIO_readPort+0x7a>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	81 f0       	breq	.+32     	; 0x1b70 <GPIO_readPort+0x68>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	83 30       	cpi	r24, 0x03	; 3
    1b56:	91 05       	cpc	r25, r1
    1b58:	81 f0       	breq	.+32     	; 0x1b7a <GPIO_readPort+0x72>
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b5c:	e9 e3       	ldi	r30, 0x39	; 57
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	0e c0       	rjmp	.+28     	; 0x1b82 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b66:	e6 e3       	ldi	r30, 0x36	; 54
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b70:	e3 e3       	ldi	r30, 0x33	; 51
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b7a:	e0 e3       	ldi	r30, 0x30	; 48
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1bbc:	80 91 72 00 	lds	r24, 0x0072
    1bc0:	90 91 73 00 	lds	r25, 0x0073
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bc8:	e0 91 72 00 	lds	r30, 0x0072
    1bcc:	f0 91 73 00 	lds	r31, 0x0073
    1bd0:	09 95       	icall
	}
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	ff 91       	pop	r31
    1bd8:	ef 91       	pop	r30
    1bda:	bf 91       	pop	r27
    1bdc:	af 91       	pop	r26
    1bde:	9f 91       	pop	r25
    1be0:	8f 91       	pop	r24
    1be2:	7f 91       	pop	r23
    1be4:	6f 91       	pop	r22
    1be6:	5f 91       	pop	r21
    1be8:	4f 91       	pop	r20
    1bea:	3f 91       	pop	r19
    1bec:	2f 91       	pop	r18
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	0f 90       	pop	r0
    1bf4:	1f 90       	pop	r1
    1bf6:	18 95       	reti

00001bf8 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <ICU_init+0x6>
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	GPIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_INPUT);
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	66 e0       	ldi	r22, 0x06	; 6
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1c10:	ef e4       	ldi	r30, 0x4F	; 79
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	8c e0       	ldi	r24, 0x0C	; 12
    1c16:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1c18:	ae e4       	ldi	r26, 0x4E	; 78
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	ee e4       	ldi	r30, 0x4E	; 78
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	98 2f       	mov	r25, r24
    1c24:	98 7f       	andi	r25, 0xF8	; 248
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	80 81       	ld	r24, Z
    1c2c:	89 2b       	or	r24, r25
    1c2e:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1c30:	ae e4       	ldi	r26, 0x4E	; 78
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ee e4       	ldi	r30, 0x4E	; 78
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	2f 7b       	andi	r18, 0xBF	; 191
    1c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c40:	fa 81       	ldd	r31, Y+2	; 0x02
    1c42:	81 81       	ldd	r24, Z+1	; 0x01
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	00 24       	eor	r0, r0
    1c4a:	96 95       	lsr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	07 94       	ror	r0
    1c50:	96 95       	lsr	r25
    1c52:	87 95       	ror	r24
    1c54:	07 94       	ror	r0
    1c56:	98 2f       	mov	r25, r24
    1c58:	80 2d       	mov	r24, r0
    1c5a:	82 2b       	or	r24, r18
    1c5c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1c5e:	ec e4       	ldi	r30, 0x4C	; 76
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	11 82       	std	Z+1, r1	; 0x01
    1c64:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1c66:	e6 e4       	ldi	r30, 0x46	; 70
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	11 82       	std	Z+1, r1	; 0x01
    1c6c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1c6e:	a9 e5       	ldi	r26, 0x59	; 89
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e9 e5       	ldi	r30, 0x59	; 89
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 62       	ori	r24, 0x20	; 32
    1c7a:	8c 93       	st	X, r24
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <ICU_setCallBack+0x6>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	90 93 73 00 	sts	0x0073, r25
    1c9c:	80 93 72 00 	sts	0x0072, r24
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1cb6:	ae e4       	ldi	r26, 0x4E	; 78
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	ee e4       	ldi	r30, 0x4E	; 78
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	2f 7b       	andi	r18, 0xBF	; 191
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	00 24       	eor	r0, r0
    1ccc:	96 95       	lsr	r25
    1cce:	87 95       	ror	r24
    1cd0:	07 94       	ror	r0
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	07 94       	ror	r0
    1cd8:	98 2f       	mov	r25, r24
    1cda:	80 2d       	mov	r24, r0
    1cdc:	82 2b       	or	r24, r18
    1cde:	8c 93       	st	X, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1cf0:	e6 e4       	ldi	r30, 0x46	; 70
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1d06:	ec e4       	ldi	r30, 0x4C	; 76
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	11 82       	std	Z+1, r1	; 0x01
    1d0c:	10 82       	st	Z, r1
}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1d1c:	ef e4       	ldi	r30, 0x4F	; 79
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	10 82       	st	Z, r1
	TCCR1B = 0;
    1d22:	ee e4       	ldi	r30, 0x4E	; 78
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	10 82       	st	Z, r1
	TCNT1 = 0;
    1d28:	ec e4       	ldi	r30, 0x4C	; 76
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	11 82       	std	Z+1, r1	; 0x01
    1d2e:	10 82       	st	Z, r1
	ICR1 = 0;
    1d30:	e6 e4       	ldi	r30, 0x46	; 70
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	11 82       	std	Z+1, r1	; 0x01
    1d36:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1d38:	a9 e5       	ldi	r26, 0x59	; 89
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e9 e5       	ldi	r30, 0x59	; 89
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 7d       	andi	r24, 0xDF	; 223
    1d44:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1d46:	10 92 73 00 	sts	0x0073, r1
    1d4a:	10 92 72 00 	sts	0x0072, r1
}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	62 e0       	ldi	r22, 0x02	; 2
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a0 ea       	ldi	r26, 0xA0	; 160
    1d82:	b1 e4       	ldi	r27, 0x41	; 65
    1d84:	8b 87       	std	Y+11, r24	; 0x0b
    1d86:	9c 87       	std	Y+12, r25	; 0x0c
    1d88:	ad 87       	std	Y+13, r26	; 0x0d
    1d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a ef       	ldi	r20, 0xFA	; 250
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8f 83       	std	Y+7, r24	; 0x07
    1da6:	98 87       	std	Y+8, r25	; 0x08
    1da8:	a9 87       	std	Y+9, r26	; 0x09
    1daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <LCD_init+0x7a>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <LCD_init+0xda>
    1e10:	88 ec       	ldi	r24, 0xC8	; 200
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_init+0xc8>
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <LCD_init+0xbc>
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_init+0x104>
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	63 e0       	ldi	r22, 0x03	; 3
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	65 e0       	ldi	r22, 0x05	; 5
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	66 e0       	ldi	r22, 0x06	; 6
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1e88:	83 e3       	ldi	r24, 0x33	; 51
    1e8a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1e8e:	82 e3       	ldi	r24, 0x32	; 50
    1e90:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1e94:	88 e2       	ldi	r24, 0x28	; 40
    1e96:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e9a:	8c e0       	ldi	r24, 0x0C	; 12
    1e9c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
}
    1ea6:	2e 96       	adiw	r28, 0x0e	; 14
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	c3 56       	subi	r28, 0x63	; 99
    1ec6:	d0 40       	sbci	r29, 0x00	; 0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ed 59       	subi	r30, 0x9D	; 157
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e1 5a       	subi	r30, 0xA1	; 161
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	8e 01       	movw	r16, r28
    1efc:	05 5a       	subi	r16, 0xA5	; 165
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	fe 01       	movw	r30, r28
    1f02:	e1 5a       	subi	r30, 0xA1	; 161
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a ef       	ldi	r20, 0xFA	; 250
    1f14:	54 e4       	ldi	r21, 0x44	; 68
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	80 83       	st	Z, r24
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	a2 83       	std	Z+2, r26	; 0x02
    1f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e5 5a       	subi	r30, 0xA5	; 165
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	44 f4       	brge	.+16     	; 0x1f56 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1f46:	fe 01       	movw	r30, r28
    1f48:	e7 5a       	subi	r30, 0xA7	; 167
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
    1f54:	64 c0       	rjmp	.+200    	; 0x201e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1f56:	fe 01       	movw	r30, r28
    1f58:	e5 5a       	subi	r30, 0xA5	; 165
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	0c f0       	brlt	.+2      	; 0x1f76 <LCD_sendCommand+0xbe>
    1f74:	43 c0       	rjmp	.+134    	; 0x1ffc <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f76:	fe 01       	movw	r30, r28
    1f78:	e1 5a       	subi	r30, 0xA1	; 161
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8e 01       	movw	r16, r28
    1f96:	07 5a       	subi	r16, 0xA7	; 167
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
    1fac:	1f c0       	rjmp	.+62     	; 0x1fec <LCD_sendCommand+0x134>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e9 5a       	subi	r30, 0xA9	; 169
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	88 ec       	ldi	r24, 0xC8	; 200
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e9 5a       	subi	r30, 0xA9	; 169
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_sendCommand+0x10e>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e9 5a       	subi	r30, 0xA9	; 169
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	de 01       	movw	r26, r28
    1fd6:	a7 5a       	subi	r26, 0xA7	; 167
    1fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5a       	subi	r30, 0xA7	; 167
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	11 96       	adiw	r26, 0x01	; 1
    1fe8:	9c 93       	st	X, r25
    1fea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 5a       	subi	r30, 0xA7	; 167
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	d1 f6       	brne	.-76     	; 0x1fae <LCD_sendCommand+0xf6>
    1ffa:	27 c0       	rjmp	.+78     	; 0x204a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	07 5a       	subi	r16, 0xA7	; 167
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e5 5a       	subi	r30, 0xA5	; 165
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	f8 01       	movw	r30, r16
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
    201e:	de 01       	movw	r26, r28
    2020:	ab 5a       	subi	r26, 0xAB	; 171
    2022:	bf 4f       	sbci	r27, 0xFF	; 255
    2024:	fe 01       	movw	r30, r28
    2026:	e7 5a       	subi	r30, 0xA7	; 167
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	8d 93       	st	X+, r24
    2030:	9c 93       	st	X, r25
    2032:	fe 01       	movw	r30, r28
    2034:	eb 5a       	subi	r30, 0xAB	; 171
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_sendCommand+0x184>
    2040:	fe 01       	movw	r30, r28
    2042:	eb 5a       	subi	r30, 0xAB	; 171
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	62 e0       	ldi	r22, 0x02	; 2
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2054:	fe 01       	movw	r30, r28
    2056:	ef 5a       	subi	r30, 0xAF	; 175
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a0 e8       	ldi	r26, 0x80	; 128
    2060:	bf e3       	ldi	r27, 0x3F	; 63
    2062:	80 83       	st	Z, r24
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	a2 83       	std	Z+2, r26	; 0x02
    2068:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	8e 01       	movw	r16, r28
    206c:	03 5b       	subi	r16, 0xB3	; 179
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	fe 01       	movw	r30, r28
    2072:	ef 5a       	subi	r30, 0xAF	; 175
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a ef       	ldi	r20, 0xFA	; 250
    2084:	54 e4       	ldi	r21, 0x44	; 68
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	80 83       	st	Z, r24
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	a2 83       	std	Z+2, r26	; 0x02
    2096:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2098:	fe 01       	movw	r30, r28
    209a:	e3 5b       	subi	r30, 0xB3	; 179
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	44 f4       	brge	.+16     	; 0x20c6 <LCD_sendCommand+0x20e>
		__ticks = 1;
    20b6:	fe 01       	movw	r30, r28
    20b8:	e5 5b       	subi	r30, 0xB5	; 181
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
    20c4:	64 c0       	rjmp	.+200    	; 0x218e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    20c6:	fe 01       	movw	r30, r28
    20c8:	e3 5b       	subi	r30, 0xB3	; 179
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	0c f0       	brlt	.+2      	; 0x20e6 <LCD_sendCommand+0x22e>
    20e4:	43 c0       	rjmp	.+134    	; 0x216c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	fe 01       	movw	r30, r28
    20e8:	ef 5a       	subi	r30, 0xAF	; 175
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8e 01       	movw	r16, r28
    2106:	05 5b       	subi	r16, 0xB5	; 181
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	f8 01       	movw	r30, r16
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
    211c:	1f c0       	rjmp	.+62     	; 0x215c <LCD_sendCommand+0x2a4>
    211e:	fe 01       	movw	r30, r28
    2120:	e7 5b       	subi	r30, 0xB7	; 183
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
    212c:	fe 01       	movw	r30, r28
    212e:	e7 5b       	subi	r30, 0xB7	; 183
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_sendCommand+0x27e>
    213a:	fe 01       	movw	r30, r28
    213c:	e7 5b       	subi	r30, 0xB7	; 183
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	de 01       	movw	r26, r28
    2146:	a5 5b       	subi	r26, 0xB5	; 181
    2148:	bf 4f       	sbci	r27, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	e5 5b       	subi	r30, 0xB5	; 181
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	11 96       	adiw	r26, 0x01	; 1
    2158:	9c 93       	st	X, r25
    215a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	fe 01       	movw	r30, r28
    215e:	e5 5b       	subi	r30, 0xB5	; 181
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	d1 f6       	brne	.-76     	; 0x211e <LCD_sendCommand+0x266>
    216a:	27 c0       	rjmp	.+78     	; 0x21ba <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	8e 01       	movw	r16, r28
    216e:	05 5b       	subi	r16, 0xB5	; 181
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e3 5b       	subi	r30, 0xB3	; 179
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	f8 01       	movw	r30, r16
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	de 01       	movw	r26, r28
    2190:	a9 5b       	subi	r26, 0xB9	; 185
    2192:	bf 4f       	sbci	r27, 0xFF	; 255
    2194:	fe 01       	movw	r30, r28
    2196:	e5 5b       	subi	r30, 0xB5	; 181
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	8d 93       	st	X+, r24
    21a0:	9c 93       	st	X, r25
    21a2:	fe 01       	movw	r30, r28
    21a4:	e9 5b       	subi	r30, 0xB9	; 185
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <LCD_sendCommand+0x2f4>
    21b0:	fe 01       	movw	r30, r28
    21b2:	e9 5b       	subi	r30, 0xB9	; 185
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    21ba:	fe 01       	movw	r30, r28
    21bc:	ed 59       	subi	r30, 0x9D	; 157
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	80 71       	andi	r24, 0x10	; 16
    21c8:	90 70       	andi	r25, 0x00	; 0
    21ca:	95 95       	asr	r25
    21cc:	87 95       	ror	r24
    21ce:	95 95       	asr	r25
    21d0:	87 95       	ror	r24
    21d2:	95 95       	asr	r25
    21d4:	87 95       	ror	r24
    21d6:	95 95       	asr	r25
    21d8:	87 95       	ror	r24
    21da:	98 2f       	mov	r25, r24
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	63 e0       	ldi	r22, 0x03	; 3
    21e0:	49 2f       	mov	r20, r25
    21e2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    21e6:	fe 01       	movw	r30, r28
    21e8:	ed 59       	subi	r30, 0x9D	; 157
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	80 72       	andi	r24, 0x20	; 32
    21f4:	90 70       	andi	r25, 0x00	; 0
    21f6:	95 95       	asr	r25
    21f8:	87 95       	ror	r24
    21fa:	95 95       	asr	r25
    21fc:	87 95       	ror	r24
    21fe:	95 95       	asr	r25
    2200:	87 95       	ror	r24
    2202:	95 95       	asr	r25
    2204:	87 95       	ror	r24
    2206:	95 95       	asr	r25
    2208:	87 95       	ror	r24
    220a:	98 2f       	mov	r25, r24
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	64 e0       	ldi	r22, 0x04	; 4
    2210:	49 2f       	mov	r20, r25
    2212:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2216:	fe 01       	movw	r30, r28
    2218:	ed 59       	subi	r30, 0x9D	; 157
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	80 74       	andi	r24, 0x40	; 64
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	08 2e       	mov	r0, r24
    2228:	89 2f       	mov	r24, r25
    222a:	00 0c       	add	r0, r0
    222c:	88 1f       	adc	r24, r24
    222e:	99 0b       	sbc	r25, r25
    2230:	00 0c       	add	r0, r0
    2232:	88 1f       	adc	r24, r24
    2234:	99 1f       	adc	r25, r25
    2236:	98 2f       	mov	r25, r24
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	65 e0       	ldi	r22, 0x05	; 5
    223c:	49 2f       	mov	r20, r25
    223e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2242:	fe 01       	movw	r30, r28
    2244:	ed 59       	subi	r30, 0x9D	; 157
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 81       	ld	r24, Z
    224a:	98 2f       	mov	r25, r24
    224c:	99 1f       	adc	r25, r25
    224e:	99 27       	eor	r25, r25
    2250:	99 1f       	adc	r25, r25
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	66 e0       	ldi	r22, 0x06	; 6
    2256:	49 2f       	mov	r20, r25
    2258:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    225c:	fe 01       	movw	r30, r28
    225e:	ed 5b       	subi	r30, 0xBD	; 189
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	a0 e8       	ldi	r26, 0x80	; 128
    2268:	bf e3       	ldi	r27, 0x3F	; 63
    226a:	80 83       	st	Z, r24
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	a2 83       	std	Z+2, r26	; 0x02
    2270:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2272:	8e 01       	movw	r16, r28
    2274:	01 5c       	subi	r16, 0xC1	; 193
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	ed 5b       	subi	r30, 0xBD	; 189
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4a ef       	ldi	r20, 0xFA	; 250
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	f8 01       	movw	r30, r16
    2298:	80 83       	st	Z, r24
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	a2 83       	std	Z+2, r26	; 0x02
    229e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a0:	fe 01       	movw	r30, r28
    22a2:	ff 96       	adiw	r30, 0x3f	; 63
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <LCD_sendCommand+0x40e>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e af       	std	Y+62, r25	; 0x3e
    22c2:	8d af       	std	Y+61, r24	; 0x3d
    22c4:	46 c0       	rjmp	.+140    	; 0x2352 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    22c6:	fe 01       	movw	r30, r28
    22c8:	ff 96       	adiw	r30, 0x3f	; 63
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
    22d8:	57 e4       	ldi	r21, 0x47	; 71
    22da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	64 f5       	brge	.+88     	; 0x233a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e2:	fe 01       	movw	r30, r28
    22e4:	ed 5b       	subi	r30, 0xBD	; 189
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e2       	ldi	r20, 0x20	; 32
    22f6:	51 e4       	ldi	r21, 0x41	; 65
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9e af       	std	Y+62, r25	; 0x3e
    230e:	8d af       	std	Y+61, r24	; 0x3d
    2310:	0f c0       	rjmp	.+30     	; 0x2330 <LCD_sendCommand+0x478>
    2312:	88 ec       	ldi	r24, 0xC8	; 200
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9c af       	std	Y+60, r25	; 0x3c
    2318:	8b af       	std	Y+59, r24	; 0x3b
    231a:	8b ad       	ldd	r24, Y+59	; 0x3b
    231c:	9c ad       	ldd	r25, Y+60	; 0x3c
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_sendCommand+0x466>
    2322:	9c af       	std	Y+60, r25	; 0x3c
    2324:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2326:	8d ad       	ldd	r24, Y+61	; 0x3d
    2328:	9e ad       	ldd	r25, Y+62	; 0x3e
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	9e af       	std	Y+62, r25	; 0x3e
    232e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2330:	8d ad       	ldd	r24, Y+61	; 0x3d
    2332:	9e ad       	ldd	r25, Y+62	; 0x3e
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	69 f7       	brne	.-38     	; 0x2312 <LCD_sendCommand+0x45a>
    2338:	16 c0       	rjmp	.+44     	; 0x2366 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233a:	fe 01       	movw	r30, r28
    233c:	ff 96       	adiw	r30, 0x3f	; 63
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e af       	std	Y+62, r25	; 0x3e
    2350:	8d af       	std	Y+61, r24	; 0x3d
    2352:	8d ad       	ldd	r24, Y+61	; 0x3d
    2354:	9e ad       	ldd	r25, Y+62	; 0x3e
    2356:	9a af       	std	Y+58, r25	; 0x3a
    2358:	89 af       	std	Y+57, r24	; 0x39
    235a:	89 ad       	ldd	r24, Y+57	; 0x39
    235c:	9a ad       	ldd	r25, Y+58	; 0x3a
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_sendCommand+0x4a6>
    2362:	9a af       	std	Y+58, r25	; 0x3a
    2364:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	62 e0       	ldi	r22, 0x02	; 2
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a0 e8       	ldi	r26, 0x80	; 128
    2376:	bf e3       	ldi	r27, 0x3F	; 63
    2378:	8d ab       	std	Y+53, r24	; 0x35
    237a:	9e ab       	std	Y+54, r25	; 0x36
    237c:	af ab       	std	Y+55, r26	; 0x37
    237e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	6d a9       	ldd	r22, Y+53	; 0x35
    2382:	7e a9       	ldd	r23, Y+54	; 0x36
    2384:	8f a9       	ldd	r24, Y+55	; 0x37
    2386:	98 ad       	ldd	r25, Y+56	; 0x38
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a ef       	ldi	r20, 0xFA	; 250
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	89 ab       	std	Y+49, r24	; 0x31
    239a:	9a ab       	std	Y+50, r25	; 0x32
    239c:	ab ab       	std	Y+51, r26	; 0x33
    239e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23a0:	69 a9       	ldd	r22, Y+49	; 0x31
    23a2:	7a a9       	ldd	r23, Y+50	; 0x32
    23a4:	8b a9       	ldd	r24, Y+51	; 0x33
    23a6:	9c a9       	ldd	r25, Y+52	; 0x34
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <LCD_sendCommand+0x50a>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	98 ab       	std	Y+48, r25	; 0x30
    23be:	8f a7       	std	Y+47, r24	; 0x2f
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    23c2:	69 a9       	ldd	r22, Y+49	; 0x31
    23c4:	7a a9       	ldd	r23, Y+50	; 0x32
    23c6:	8b a9       	ldd	r24, Y+51	; 0x33
    23c8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	6d a9       	ldd	r22, Y+53	; 0x35
    23dc:	7e a9       	ldd	r23, Y+54	; 0x36
    23de:	8f a9       	ldd	r24, Y+55	; 0x37
    23e0:	98 ad       	ldd	r25, Y+56	; 0x38
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	98 ab       	std	Y+48, r25	; 0x30
    2400:	8f a7       	std	Y+47, r24	; 0x2f
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <LCD_sendCommand+0x56a>
    2404:	88 ec       	ldi	r24, 0xC8	; 200
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9e a7       	std	Y+46, r25	; 0x2e
    240a:	8d a7       	std	Y+45, r24	; 0x2d
    240c:	8d a5       	ldd	r24, Y+45	; 0x2d
    240e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_sendCommand+0x558>
    2414:	9e a7       	std	Y+46, r25	; 0x2e
    2416:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8f a5       	ldd	r24, Y+47	; 0x2f
    241a:	98 a9       	ldd	r25, Y+48	; 0x30
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	98 ab       	std	Y+48, r25	; 0x30
    2420:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8f a5       	ldd	r24, Y+47	; 0x2f
    2424:	98 a9       	ldd	r25, Y+48	; 0x30
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <LCD_sendCommand+0x54c>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	69 a9       	ldd	r22, Y+49	; 0x31
    242e:	7a a9       	ldd	r23, Y+50	; 0x32
    2430:	8b a9       	ldd	r24, Y+51	; 0x33
    2432:	9c a9       	ldd	r25, Y+52	; 0x34
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	98 ab       	std	Y+48, r25	; 0x30
    243e:	8f a7       	std	Y+47, r24	; 0x2f
    2440:	8f a5       	ldd	r24, Y+47	; 0x2f
    2442:	98 a9       	ldd	r25, Y+48	; 0x30
    2444:	9c a7       	std	Y+44, r25	; 0x2c
    2446:	8b a7       	std	Y+43, r24	; 0x2b
    2448:	8b a5       	ldd	r24, Y+43	; 0x2b
    244a:	9c a5       	ldd	r25, Y+44	; 0x2c
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <LCD_sendCommand+0x594>
    2450:	9c a7       	std	Y+44, r25	; 0x2c
    2452:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e8       	ldi	r26, 0x80	; 128
    2464:	bf e3       	ldi	r27, 0x3F	; 63
    2466:	8f a3       	std	Y+39, r24	; 0x27
    2468:	98 a7       	std	Y+40, r25	; 0x28
    246a:	a9 a7       	std	Y+41, r26	; 0x29
    246c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6f a1       	ldd	r22, Y+39	; 0x27
    2470:	78 a5       	ldd	r23, Y+40	; 0x28
    2472:	89 a5       	ldd	r24, Y+41	; 0x29
    2474:	9a a5       	ldd	r25, Y+42	; 0x2a
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a ef       	ldi	r20, 0xFA	; 250
    247c:	54 e4       	ldi	r21, 0x44	; 68
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8b a3       	std	Y+35, r24	; 0x23
    2488:	9c a3       	std	Y+36, r25	; 0x24
    248a:	ad a3       	std	Y+37, r26	; 0x25
    248c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    248e:	6b a1       	ldd	r22, Y+35	; 0x23
    2490:	7c a1       	ldd	r23, Y+36	; 0x24
    2492:	8d a1       	ldd	r24, Y+37	; 0x25
    2494:	9e a1       	ldd	r25, Y+38	; 0x26
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9a a3       	std	Y+34, r25	; 0x22
    24ac:	89 a3       	std	Y+33, r24	; 0x21
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    24b0:	6b a1       	ldd	r22, Y+35	; 0x23
    24b2:	7c a1       	ldd	r23, Y+36	; 0x24
    24b4:	8d a1       	ldd	r24, Y+37	; 0x25
    24b6:	9e a1       	ldd	r25, Y+38	; 0x26
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6f a1       	ldd	r22, Y+39	; 0x27
    24ca:	78 a5       	ldd	r23, Y+40	; 0x28
    24cc:	89 a5       	ldd	r24, Y+41	; 0x29
    24ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9a a3       	std	Y+34, r25	; 0x22
    24ee:	89 a3       	std	Y+33, r24	; 0x21
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <LCD_sendCommand+0x658>
    24f2:	88 ec       	ldi	r24, 0xC8	; 200
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	98 a3       	std	Y+32, r25	; 0x20
    24f8:	8f 8f       	std	Y+31, r24	; 0x1f
    24fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24fc:	98 a1       	ldd	r25, Y+32	; 0x20
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_sendCommand+0x646>
    2502:	98 a3       	std	Y+32, r25	; 0x20
    2504:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	89 a1       	ldd	r24, Y+33	; 0x21
    2508:	9a a1       	ldd	r25, Y+34	; 0x22
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9a a3       	std	Y+34, r25	; 0x22
    250e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	89 a1       	ldd	r24, Y+33	; 0x21
    2512:	9a a1       	ldd	r25, Y+34	; 0x22
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <LCD_sendCommand+0x63a>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6b a1       	ldd	r22, Y+35	; 0x23
    251c:	7c a1       	ldd	r23, Y+36	; 0x24
    251e:	8d a1       	ldd	r24, Y+37	; 0x25
    2520:	9e a1       	ldd	r25, Y+38	; 0x26
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9a a3       	std	Y+34, r25	; 0x22
    252c:	89 a3       	std	Y+33, r24	; 0x21
    252e:	89 a1       	ldd	r24, Y+33	; 0x21
    2530:	9a a1       	ldd	r25, Y+34	; 0x22
    2532:	9e 8f       	std	Y+30, r25	; 0x1e
    2534:	8d 8f       	std	Y+29, r24	; 0x1d
    2536:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2538:	9e 8d       	ldd	r25, Y+30	; 0x1e
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_sendCommand+0x682>
    253e:	9e 8f       	std	Y+30, r25	; 0x1e
    2540:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2542:	fe 01       	movw	r30, r28
    2544:	ed 59       	subi	r30, 0x9D	; 157
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	98 2f       	mov	r25, r24
    254c:	91 70       	andi	r25, 0x01	; 1
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	63 e0       	ldi	r22, 0x03	; 3
    2552:	49 2f       	mov	r20, r25
    2554:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2558:	fe 01       	movw	r30, r28
    255a:	ed 59       	subi	r30, 0x9D	; 157
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 81       	ld	r24, Z
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	82 70       	andi	r24, 0x02	; 2
    2566:	90 70       	andi	r25, 0x00	; 0
    2568:	95 95       	asr	r25
    256a:	87 95       	ror	r24
    256c:	98 2f       	mov	r25, r24
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	64 e0       	ldi	r22, 0x04	; 4
    2572:	49 2f       	mov	r20, r25
    2574:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2578:	fe 01       	movw	r30, r28
    257a:	ed 59       	subi	r30, 0x9D	; 157
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	88 2f       	mov	r24, r24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	84 70       	andi	r24, 0x04	; 4
    2586:	90 70       	andi	r25, 0x00	; 0
    2588:	95 95       	asr	r25
    258a:	87 95       	ror	r24
    258c:	95 95       	asr	r25
    258e:	87 95       	ror	r24
    2590:	98 2f       	mov	r25, r24
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	65 e0       	ldi	r22, 0x05	; 5
    2596:	49 2f       	mov	r20, r25
    2598:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    259c:	fe 01       	movw	r30, r28
    259e:	ed 59       	subi	r30, 0x9D	; 157
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	88 2f       	mov	r24, r24
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	88 70       	andi	r24, 0x08	; 8
    25aa:	90 70       	andi	r25, 0x00	; 0
    25ac:	95 95       	asr	r25
    25ae:	87 95       	ror	r24
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	95 95       	asr	r25
    25b6:	87 95       	ror	r24
    25b8:	98 2f       	mov	r25, r24
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	66 e0       	ldi	r22, 0x06	; 6
    25be:	49 2f       	mov	r20, r25
    25c0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e8       	ldi	r26, 0x80	; 128
    25ca:	bf e3       	ldi	r27, 0x3F	; 63
    25cc:	89 8f       	std	Y+25, r24	; 0x19
    25ce:	9a 8f       	std	Y+26, r25	; 0x1a
    25d0:	ab 8f       	std	Y+27, r26	; 0x1b
    25d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	69 8d       	ldd	r22, Y+25	; 0x19
    25d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a ef       	ldi	r20, 0xFA	; 250
    25e2:	54 e4       	ldi	r21, 0x44	; 68
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8d 8b       	std	Y+21, r24	; 0x15
    25ee:	9e 8b       	std	Y+22, r25	; 0x16
    25f0:	af 8b       	std	Y+23, r26	; 0x17
    25f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f4:	6d 89       	ldd	r22, Y+21	; 0x15
    25f6:	7e 89       	ldd	r23, Y+22	; 0x16
    25f8:	8f 89       	ldd	r24, Y+23	; 0x17
    25fa:	98 8d       	ldd	r25, Y+24	; 0x18
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <LCD_sendCommand+0x75e>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2616:	6d 89       	ldd	r22, Y+21	; 0x15
    2618:	7e 89       	ldd	r23, Y+22	; 0x16
    261a:	8f 89       	ldd	r24, Y+23	; 0x17
    261c:	98 8d       	ldd	r25, Y+24	; 0x18
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	69 8d       	ldd	r22, Y+25	; 0x19
    2630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_sendCommand+0x7be>
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9a 8b       	std	Y+18, r25	; 0x12
    265e:	89 8b       	std	Y+17, r24	; 0x11
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	9a 89       	ldd	r25, Y+18	; 0x12
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_sendCommand+0x7ac>
    2668:	9a 8b       	std	Y+18, r25	; 0x12
    266a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9c 8b       	std	Y+20, r25	; 0x14
    2674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_sendCommand+0x7a0>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9c 8b       	std	Y+20, r25	; 0x14
    2692:	8b 8b       	std	Y+19, r24	; 0x13
    2694:	8b 89       	ldd	r24, Y+19	; 0x13
    2696:	9c 89       	ldd	r25, Y+20	; 0x14
    2698:	98 8b       	std	Y+16, r25	; 0x10
    269a:	8f 87       	std	Y+15, r24	; 0x0f
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	98 89       	ldd	r25, Y+16	; 0x10
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_sendCommand+0x7e8>
    26a4:	98 8b       	std	Y+16, r25	; 0x10
    26a6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	62 e0       	ldi	r22, 0x02	; 2
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	8b 87       	std	Y+11, r24	; 0x0b
    26bc:	9c 87       	std	Y+12, r25	; 0x0c
    26be:	ad 87       	std	Y+13, r26	; 0x0d
    26c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8f 83       	std	Y+7, r24	; 0x07
    26dc:	98 87       	std	Y+8, r25	; 0x08
    26de:	a9 87       	std	Y+9, r26	; 0x09
    26e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e2:	6f 81       	ldd	r22, Y+7	; 0x07
    26e4:	78 85       	ldd	r23, Y+8	; 0x08
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCD_sendCommand+0x84c>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6b 85       	ldd	r22, Y+11	; 0x0b
    271e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2720:	8d 85       	ldd	r24, Y+13	; 0x0d
    2722:	9e 85       	ldd	r25, Y+14	; 0x0e
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <LCD_sendCommand+0x8ac>
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	8b 83       	std	Y+3, r24	; 0x03
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_sendCommand+0x89a>
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <LCD_sendCommand+0x88e>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6f 81       	ldd	r22, Y+7	; 0x07
    2770:	78 85       	ldd	r23, Y+8	; 0x08
    2772:	89 85       	ldd	r24, Y+9	; 0x09
    2774:	9a 85       	ldd	r25, Y+10	; 0x0a
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_sendCommand+0x8d6>
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2796:	cd 59       	subi	r28, 0x9D	; 157
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	08 95       	ret

000027ae <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	c3 56       	subi	r28, 0x63	; 99
    27bc:	d0 40       	sbci	r29, 0x00	; 0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 59       	subi	r30, 0x9D	; 157
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    27da:	fe 01       	movw	r30, r28
    27dc:	e1 5a       	subi	r30, 0xA1	; 161
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e8       	ldi	r26, 0x80	; 128
    27e6:	bf e3       	ldi	r27, 0x3F	; 63
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	8e 01       	movw	r16, r28
    27f2:	05 5a       	subi	r16, 0xA5	; 165
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
    27f6:	fe 01       	movw	r30, r28
    27f8:	e1 5a       	subi	r30, 0xA1	; 161
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	60 81       	ld	r22, Z
    27fe:	71 81       	ldd	r23, Z+1	; 0x01
    2800:	82 81       	ldd	r24, Z+2	; 0x02
    2802:	93 81       	ldd	r25, Z+3	; 0x03
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a ef       	ldi	r20, 0xFA	; 250
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	f8 01       	movw	r30, r16
    2816:	80 83       	st	Z, r24
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	a2 83       	std	Z+2, r26	; 0x02
    281c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281e:	fe 01       	movw	r30, r28
    2820:	e5 5a       	subi	r30, 0xA5	; 165
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	44 f4       	brge	.+16     	; 0x284c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    283c:	fe 01       	movw	r30, r28
    283e:	e7 5a       	subi	r30, 0xA7	; 167
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
    284a:	64 c0       	rjmp	.+200    	; 0x2914 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    284c:	fe 01       	movw	r30, r28
    284e:	e5 5a       	subi	r30, 0xA5	; 165
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	0c f0       	brlt	.+2      	; 0x286c <LCD_displayCharacter+0xbe>
    286a:	43 c0       	rjmp	.+134    	; 0x28f2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	fe 01       	movw	r30, r28
    286e:	e1 5a       	subi	r30, 0xA1	; 161
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	60 81       	ld	r22, Z
    2874:	71 81       	ldd	r23, Z+1	; 0x01
    2876:	82 81       	ldd	r24, Z+2	; 0x02
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	8e 01       	movw	r16, r28
    288c:	07 5a       	subi	r16, 0xA7	; 167
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	f8 01       	movw	r30, r16
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	1f c0       	rjmp	.+62     	; 0x28e2 <LCD_displayCharacter+0x134>
    28a4:	fe 01       	movw	r30, r28
    28a6:	e9 5a       	subi	r30, 0xA9	; 169
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	88 ec       	ldi	r24, 0xC8	; 200
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
    28b2:	fe 01       	movw	r30, r28
    28b4:	e9 5a       	subi	r30, 0xA9	; 169
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	91 81       	ldd	r25, Z+1	; 0x01
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_displayCharacter+0x10e>
    28c0:	fe 01       	movw	r30, r28
    28c2:	e9 5a       	subi	r30, 0xA9	; 169
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	de 01       	movw	r26, r28
    28cc:	a7 5a       	subi	r26, 0xA7	; 167
    28ce:	bf 4f       	sbci	r27, 0xFF	; 255
    28d0:	fe 01       	movw	r30, r28
    28d2:	e7 5a       	subi	r30, 0xA7	; 167
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 81       	ld	r24, Z
    28d8:	91 81       	ldd	r25, Z+1	; 0x01
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	11 96       	adiw	r26, 0x01	; 1
    28de:	9c 93       	st	X, r25
    28e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	fe 01       	movw	r30, r28
    28e4:	e7 5a       	subi	r30, 0xA7	; 167
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	d1 f6       	brne	.-76     	; 0x28a4 <LCD_displayCharacter+0xf6>
    28f0:	27 c0       	rjmp	.+78     	; 0x2940 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	8e 01       	movw	r16, r28
    28f4:	07 5a       	subi	r16, 0xA7	; 167
    28f6:	1f 4f       	sbci	r17, 0xFF	; 255
    28f8:	fe 01       	movw	r30, r28
    28fa:	e5 5a       	subi	r30, 0xA5	; 165
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	f8 01       	movw	r30, r16
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
    2914:	de 01       	movw	r26, r28
    2916:	ab 5a       	subi	r26, 0xAB	; 171
    2918:	bf 4f       	sbci	r27, 0xFF	; 255
    291a:	fe 01       	movw	r30, r28
    291c:	e7 5a       	subi	r30, 0xA7	; 167
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 81       	ld	r24, Z
    2922:	91 81       	ldd	r25, Z+1	; 0x01
    2924:	8d 93       	st	X+, r24
    2926:	9c 93       	st	X, r25
    2928:	fe 01       	movw	r30, r28
    292a:	eb 5a       	subi	r30, 0xAB	; 171
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_displayCharacter+0x184>
    2936:	fe 01       	movw	r30, r28
    2938:	eb 5a       	subi	r30, 0xAB	; 171
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    294a:	fe 01       	movw	r30, r28
    294c:	ef 5a       	subi	r30, 0xAF	; 175
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e8       	ldi	r26, 0x80	; 128
    2956:	bf e3       	ldi	r27, 0x3F	; 63
    2958:	80 83       	st	Z, r24
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	a2 83       	std	Z+2, r26	; 0x02
    295e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	8e 01       	movw	r16, r28
    2962:	03 5b       	subi	r16, 0xB3	; 179
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	fe 01       	movw	r30, r28
    2968:	ef 5a       	subi	r30, 0xAF	; 175
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a ef       	ldi	r20, 0xFA	; 250
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	f8 01       	movw	r30, r16
    2986:	80 83       	st	Z, r24
    2988:	91 83       	std	Z+1, r25	; 0x01
    298a:	a2 83       	std	Z+2, r26	; 0x02
    298c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    298e:	fe 01       	movw	r30, r28
    2990:	e3 5b       	subi	r30, 0xB3	; 179
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	44 f4       	brge	.+16     	; 0x29bc <LCD_displayCharacter+0x20e>
		__ticks = 1;
    29ac:	fe 01       	movw	r30, r28
    29ae:	e5 5b       	subi	r30, 0xB5	; 181
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	64 c0       	rjmp	.+200    	; 0x2a84 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    29bc:	fe 01       	movw	r30, r28
    29be:	e3 5b       	subi	r30, 0xB3	; 179
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	0c f0       	brlt	.+2      	; 0x29dc <LCD_displayCharacter+0x22e>
    29da:	43 c0       	rjmp	.+134    	; 0x2a62 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29dc:	fe 01       	movw	r30, r28
    29de:	ef 5a       	subi	r30, 0xAF	; 175
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	8e 01       	movw	r16, r28
    29fc:	05 5b       	subi	r16, 0xB5	; 181
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	1f c0       	rjmp	.+62     	; 0x2a52 <LCD_displayCharacter+0x2a4>
    2a14:	fe 01       	movw	r30, r28
    2a16:	e7 5b       	subi	r30, 0xB7	; 183
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	88 ec       	ldi	r24, 0xC8	; 200
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	e7 5b       	subi	r30, 0xB7	; 183
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_displayCharacter+0x27e>
    2a30:	fe 01       	movw	r30, r28
    2a32:	e7 5b       	subi	r30, 0xB7	; 183
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	de 01       	movw	r26, r28
    2a3c:	a5 5b       	subi	r26, 0xB5	; 181
    2a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a40:	fe 01       	movw	r30, r28
    2a42:	e5 5b       	subi	r30, 0xB5	; 181
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	91 81       	ldd	r25, Z+1	; 0x01
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	9c 93       	st	X, r25
    2a50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a52:	fe 01       	movw	r30, r28
    2a54:	e5 5b       	subi	r30, 0xB5	; 181
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	d1 f6       	brne	.-76     	; 0x2a14 <LCD_displayCharacter+0x266>
    2a60:	27 c0       	rjmp	.+78     	; 0x2ab0 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	8e 01       	movw	r16, r28
    2a64:	05 5b       	subi	r16, 0xB5	; 181
    2a66:	1f 4f       	sbci	r17, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e3 5b       	subi	r30, 0xB3	; 179
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	f8 01       	movw	r30, r16
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
    2a84:	de 01       	movw	r26, r28
    2a86:	a9 5b       	subi	r26, 0xB9	; 185
    2a88:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e5 5b       	subi	r30, 0xB5	; 181
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	8d 93       	st	X+, r24
    2a96:	9c 93       	st	X, r25
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e9 5b       	subi	r30, 0xB9	; 185
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	91 81       	ldd	r25, Z+1	; 0x01
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_displayCharacter+0x2f4>
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e9 5b       	subi	r30, 0xB9	; 185
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	91 83       	std	Z+1, r25	; 0x01
    2aae:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ed 59       	subi	r30, 0x9D	; 157
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 81       	ld	r24, Z
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	80 71       	andi	r24, 0x10	; 16
    2abe:	90 70       	andi	r25, 0x00	; 0
    2ac0:	95 95       	asr	r25
    2ac2:	87 95       	ror	r24
    2ac4:	95 95       	asr	r25
    2ac6:	87 95       	ror	r24
    2ac8:	95 95       	asr	r25
    2aca:	87 95       	ror	r24
    2acc:	95 95       	asr	r25
    2ace:	87 95       	ror	r24
    2ad0:	98 2f       	mov	r25, r24
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	63 e0       	ldi	r22, 0x03	; 3
    2ad6:	49 2f       	mov	r20, r25
    2ad8:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2adc:	fe 01       	movw	r30, r28
    2ade:	ed 59       	subi	r30, 0x9D	; 157
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	88 2f       	mov	r24, r24
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	80 72       	andi	r24, 0x20	; 32
    2aea:	90 70       	andi	r25, 0x00	; 0
    2aec:	95 95       	asr	r25
    2aee:	87 95       	ror	r24
    2af0:	95 95       	asr	r25
    2af2:	87 95       	ror	r24
    2af4:	95 95       	asr	r25
    2af6:	87 95       	ror	r24
    2af8:	95 95       	asr	r25
    2afa:	87 95       	ror	r24
    2afc:	95 95       	asr	r25
    2afe:	87 95       	ror	r24
    2b00:	98 2f       	mov	r25, r24
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	64 e0       	ldi	r22, 0x04	; 4
    2b06:	49 2f       	mov	r20, r25
    2b08:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ed 59       	subi	r30, 0x9D	; 157
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	80 74       	andi	r24, 0x40	; 64
    2b1a:	90 70       	andi	r25, 0x00	; 0
    2b1c:	08 2e       	mov	r0, r24
    2b1e:	89 2f       	mov	r24, r25
    2b20:	00 0c       	add	r0, r0
    2b22:	88 1f       	adc	r24, r24
    2b24:	99 0b       	sbc	r25, r25
    2b26:	00 0c       	add	r0, r0
    2b28:	88 1f       	adc	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	98 2f       	mov	r25, r24
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	65 e0       	ldi	r22, 0x05	; 5
    2b32:	49 2f       	mov	r20, r25
    2b34:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2b38:	fe 01       	movw	r30, r28
    2b3a:	ed 59       	subi	r30, 0x9D	; 157
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	98 2f       	mov	r25, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	99 27       	eor	r25, r25
    2b46:	99 1f       	adc	r25, r25
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	66 e0       	ldi	r22, 0x06	; 6
    2b4c:	49 2f       	mov	r20, r25
    2b4e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 5b       	subi	r30, 0xBD	; 189
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 e8       	ldi	r26, 0x80	; 128
    2b5e:	bf e3       	ldi	r27, 0x3F	; 63
    2b60:	80 83       	st	Z, r24
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	a2 83       	std	Z+2, r26	; 0x02
    2b66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	8e 01       	movw	r16, r28
    2b6a:	01 5c       	subi	r16, 0xC1	; 193
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ed 5b       	subi	r30, 0xBD	; 189
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	4a ef       	ldi	r20, 0xFA	; 250
    2b82:	54 e4       	ldi	r21, 0x44	; 68
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	80 83       	st	Z, r24
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	a2 83       	std	Z+2, r26	; 0x02
    2b94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b96:	fe 01       	movw	r30, r28
    2b98:	ff 96       	adiw	r30, 0x3f	; 63
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9e af       	std	Y+62, r25	; 0x3e
    2bb8:	8d af       	std	Y+61, r24	; 0x3d
    2bba:	46 c0       	rjmp	.+140    	; 0x2c48 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ff 96       	adiw	r30, 0x3f	; 63
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	64 f5       	brge	.+88     	; 0x2c30 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ed 5b       	subi	r30, 0xBD	; 189
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e af       	std	Y+62, r25	; 0x3e
    2c04:	8d af       	std	Y+61, r24	; 0x3d
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_displayCharacter+0x478>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9c af       	std	Y+60, r25	; 0x3c
    2c0e:	8b af       	std	Y+59, r24	; 0x3b
    2c10:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c12:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_displayCharacter+0x466>
    2c18:	9c af       	std	Y+60, r25	; 0x3c
    2c1a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e af       	std	Y+62, r25	; 0x3e
    2c24:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_displayCharacter+0x45a>
    2c2e:	16 c0       	rjmp	.+44     	; 0x2c5c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	fe 01       	movw	r30, r28
    2c32:	ff 96       	adiw	r30, 0x3f	; 63
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e af       	std	Y+62, r25	; 0x3e
    2c46:	8d af       	std	Y+61, r24	; 0x3d
    2c48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c4c:	9a af       	std	Y+58, r25	; 0x3a
    2c4e:	89 af       	std	Y+57, r24	; 0x39
    2c50:	89 ad       	ldd	r24, Y+57	; 0x39
    2c52:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_displayCharacter+0x4a6>
    2c58:	9a af       	std	Y+58, r25	; 0x3a
    2c5a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	62 e0       	ldi	r22, 0x02	; 2
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e8       	ldi	r26, 0x80	; 128
    2c6c:	bf e3       	ldi	r27, 0x3F	; 63
    2c6e:	8d ab       	std	Y+53, r24	; 0x35
    2c70:	9e ab       	std	Y+54, r25	; 0x36
    2c72:	af ab       	std	Y+55, r26	; 0x37
    2c74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	6d a9       	ldd	r22, Y+53	; 0x35
    2c78:	7e a9       	ldd	r23, Y+54	; 0x36
    2c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	4a ef       	ldi	r20, 0xFA	; 250
    2c84:	54 e4       	ldi	r21, 0x44	; 68
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	89 ab       	std	Y+49, r24	; 0x31
    2c90:	9a ab       	std	Y+50, r25	; 0x32
    2c92:	ab ab       	std	Y+51, r26	; 0x33
    2c94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c96:	69 a9       	ldd	r22, Y+49	; 0x31
    2c98:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	2c f4       	brge	.+10     	; 0x2cb8 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	98 ab       	std	Y+48, r25	; 0x30
    2cb4:	8f a7       	std	Y+47, r24	; 0x2f
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cba:	7a a9       	ldd	r23, Y+50	; 0x32
    2cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	3f ef       	ldi	r19, 0xFF	; 255
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	57 e4       	ldi	r21, 0x47	; 71
    2cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	4c f5       	brge	.+82     	; 0x2d22 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	98 ab       	std	Y+48, r25	; 0x30
    2cf6:	8f a7       	std	Y+47, r24	; 0x2f
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <LCD_displayCharacter+0x56a>
    2cfa:	88 ec       	ldi	r24, 0xC8	; 200
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9e a7       	std	Y+46, r25	; 0x2e
    2d00:	8d a7       	std	Y+45, r24	; 0x2d
    2d02:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d04:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <LCD_displayCharacter+0x558>
    2d0a:	9e a7       	std	Y+46, r25	; 0x2e
    2d0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d10:	98 a9       	ldd	r25, Y+48	; 0x30
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	98 ab       	std	Y+48, r25	; 0x30
    2d16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <LCD_displayCharacter+0x54c>
    2d20:	14 c0       	rjmp	.+40     	; 0x2d4a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	69 a9       	ldd	r22, Y+49	; 0x31
    2d24:	7a a9       	ldd	r23, Y+50	; 0x32
    2d26:	8b a9       	ldd	r24, Y+51	; 0x33
    2d28:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	98 ab       	std	Y+48, r25	; 0x30
    2d34:	8f a7       	std	Y+47, r24	; 0x2f
    2d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d38:	98 a9       	ldd	r25, Y+48	; 0x30
    2d3a:	9c a7       	std	Y+44, r25	; 0x2c
    2d3c:	8b a7       	std	Y+43, r24	; 0x2b
    2d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <LCD_displayCharacter+0x594>
    2d46:	9c a7       	std	Y+44, r25	; 0x2c
    2d48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	62 e0       	ldi	r22, 0x02	; 2
    2d4e:	41 e0       	ldi	r20, 0x01	; 1
    2d50:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a0 e8       	ldi	r26, 0x80	; 128
    2d5a:	bf e3       	ldi	r27, 0x3F	; 63
    2d5c:	8f a3       	std	Y+39, r24	; 0x27
    2d5e:	98 a7       	std	Y+40, r25	; 0x28
    2d60:	a9 a7       	std	Y+41, r26	; 0x29
    2d62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d64:	6f a1       	ldd	r22, Y+39	; 0x27
    2d66:	78 a5       	ldd	r23, Y+40	; 0x28
    2d68:	89 a5       	ldd	r24, Y+41	; 0x29
    2d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a ef       	ldi	r20, 0xFA	; 250
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	8b a3       	std	Y+35, r24	; 0x23
    2d7e:	9c a3       	std	Y+36, r25	; 0x24
    2d80:	ad a3       	std	Y+37, r26	; 0x25
    2d82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d84:	6b a1       	ldd	r22, Y+35	; 0x23
    2d86:	7c a1       	ldd	r23, Y+36	; 0x24
    2d88:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	2c f4       	brge	.+10     	; 0x2da6 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9a a3       	std	Y+34, r25	; 0x22
    2da2:	89 a3       	std	Y+33, r24	; 0x21
    2da4:	3f c0       	rjmp	.+126    	; 0x2e24 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2da6:	6b a1       	ldd	r22, Y+35	; 0x23
    2da8:	7c a1       	ldd	r23, Y+36	; 0x24
    2daa:	8d a1       	ldd	r24, Y+37	; 0x25
    2dac:	9e a1       	ldd	r25, Y+38	; 0x26
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	3f ef       	ldi	r19, 0xFF	; 255
    2db2:	4f e7       	ldi	r20, 0x7F	; 127
    2db4:	57 e4       	ldi	r21, 0x47	; 71
    2db6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dba:	18 16       	cp	r1, r24
    2dbc:	4c f5       	brge	.+82     	; 0x2e10 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    2dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    2dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    2dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	9a a3       	std	Y+34, r25	; 0x22
    2de4:	89 a3       	std	Y+33, r24	; 0x21
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <LCD_displayCharacter+0x658>
    2de8:	88 ec       	ldi	r24, 0xC8	; 200
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	98 a3       	std	Y+32, r25	; 0x20
    2dee:	8f 8f       	std	Y+31, r24	; 0x1f
    2df0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2df2:	98 a1       	ldd	r25, Y+32	; 0x20
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <LCD_displayCharacter+0x646>
    2df8:	98 a3       	std	Y+32, r25	; 0x20
    2dfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	9a a3       	std	Y+34, r25	; 0x22
    2e04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e06:	89 a1       	ldd	r24, Y+33	; 0x21
    2e08:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <LCD_displayCharacter+0x63a>
    2e0e:	14 c0       	rjmp	.+40     	; 0x2e38 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e10:	6b a1       	ldd	r22, Y+35	; 0x23
    2e12:	7c a1       	ldd	r23, Y+36	; 0x24
    2e14:	8d a1       	ldd	r24, Y+37	; 0x25
    2e16:	9e a1       	ldd	r25, Y+38	; 0x26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9a a3       	std	Y+34, r25	; 0x22
    2e22:	89 a3       	std	Y+33, r24	; 0x21
    2e24:	89 a1       	ldd	r24, Y+33	; 0x21
    2e26:	9a a1       	ldd	r25, Y+34	; 0x22
    2e28:	9e 8f       	std	Y+30, r25	; 0x1e
    2e2a:	8d 8f       	std	Y+29, r24	; 0x1d
    2e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_displayCharacter+0x682>
    2e34:	9e 8f       	std	Y+30, r25	; 0x1e
    2e36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2e38:	fe 01       	movw	r30, r28
    2e3a:	ed 59       	subi	r30, 0x9D	; 157
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	98 2f       	mov	r25, r24
    2e42:	91 70       	andi	r25, 0x01	; 1
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	63 e0       	ldi	r22, 0x03	; 3
    2e48:	49 2f       	mov	r20, r25
    2e4a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ed 59       	subi	r30, 0x9D	; 157
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	82 70       	andi	r24, 0x02	; 2
    2e5c:	90 70       	andi	r25, 0x00	; 0
    2e5e:	95 95       	asr	r25
    2e60:	87 95       	ror	r24
    2e62:	98 2f       	mov	r25, r24
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	64 e0       	ldi	r22, 0x04	; 4
    2e68:	49 2f       	mov	r20, r25
    2e6a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ed 59       	subi	r30, 0x9D	; 157
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	84 70       	andi	r24, 0x04	; 4
    2e7c:	90 70       	andi	r25, 0x00	; 0
    2e7e:	95 95       	asr	r25
    2e80:	87 95       	ror	r24
    2e82:	95 95       	asr	r25
    2e84:	87 95       	ror	r24
    2e86:	98 2f       	mov	r25, r24
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	65 e0       	ldi	r22, 0x05	; 5
    2e8c:	49 2f       	mov	r20, r25
    2e8e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2e92:	fe 01       	movw	r30, r28
    2e94:	ed 59       	subi	r30, 0x9D	; 157
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	88 2f       	mov	r24, r24
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	88 70       	andi	r24, 0x08	; 8
    2ea0:	90 70       	andi	r25, 0x00	; 0
    2ea2:	95 95       	asr	r25
    2ea4:	87 95       	ror	r24
    2ea6:	95 95       	asr	r25
    2ea8:	87 95       	ror	r24
    2eaa:	95 95       	asr	r25
    2eac:	87 95       	ror	r24
    2eae:	98 2f       	mov	r25, r24
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	66 e0       	ldi	r22, 0x06	; 6
    2eb4:	49 2f       	mov	r20, r25
    2eb6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 e8       	ldi	r26, 0x80	; 128
    2ec0:	bf e3       	ldi	r27, 0x3F	; 63
    2ec2:	89 8f       	std	Y+25, r24	; 0x19
    2ec4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	69 8d       	ldd	r22, Y+25	; 0x19
    2ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8d 8b       	std	Y+21, r24	; 0x15
    2ee4:	9e 8b       	std	Y+22, r25	; 0x16
    2ee6:	af 8b       	std	Y+23, r26	; 0x17
    2ee8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eea:	6d 89       	ldd	r22, Y+21	; 0x15
    2eec:	7e 89       	ldd	r23, Y+22	; 0x16
    2eee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9c 8b       	std	Y+20, r25	; 0x14
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f10:	8f 89       	ldd	r24, Y+23	; 0x17
    2f12:	98 8d       	ldd	r25, Y+24	; 0x18
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	69 8d       	ldd	r22, Y+25	; 0x19
    2f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9c 8b       	std	Y+20, r25	; 0x14
    2f4a:	8b 8b       	std	Y+19, r24	; 0x13
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <LCD_displayCharacter+0x7be>
    2f4e:	88 ec       	ldi	r24, 0xC8	; 200
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9a 8b       	std	Y+18, r25	; 0x12
    2f54:	89 8b       	std	Y+17, r24	; 0x11
    2f56:	89 89       	ldd	r24, Y+17	; 0x11
    2f58:	9a 89       	ldd	r25, Y+18	; 0x12
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <LCD_displayCharacter+0x7ac>
    2f5e:	9a 8b       	std	Y+18, r25	; 0x12
    2f60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8b 89       	ldd	r24, Y+19	; 0x13
    2f64:	9c 89       	ldd	r25, Y+20	; 0x14
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9c 8b       	std	Y+20, r25	; 0x14
    2f6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <LCD_displayCharacter+0x7a0>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6d 89       	ldd	r22, Y+21	; 0x15
    2f78:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9c 8b       	std	Y+20, r25	; 0x14
    2f88:	8b 8b       	std	Y+19, r24	; 0x13
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	98 8b       	std	Y+16, r25	; 0x10
    2f90:	8f 87       	std	Y+15, r24	; 0x0f
    2f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f94:	98 89       	ldd	r25, Y+16	; 0x10
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_displayCharacter+0x7e8>
    2f9a:	98 8b       	std	Y+16, r25	; 0x10
    2f9c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	62 e0       	ldi	r22, 0x02	; 2
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a0 e8       	ldi	r26, 0x80	; 128
    2fae:	bf e3       	ldi	r27, 0x3F	; 63
    2fb0:	8b 87       	std	Y+11, r24	; 0x0b
    2fb2:	9c 87       	std	Y+12, r25	; 0x0c
    2fb4:	ad 87       	std	Y+13, r26	; 0x0d
    2fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	4a ef       	ldi	r20, 0xFA	; 250
    2fc6:	54 e4       	ldi	r21, 0x44	; 68
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	8f 83       	std	Y+7, r24	; 0x07
    2fd2:	98 87       	std	Y+8, r25	; 0x08
    2fd4:	a9 87       	std	Y+9, r26	; 0x09
    2fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fda:	78 85       	ldd	r23, Y+8	; 0x08
    2fdc:	89 85       	ldd	r24, Y+9	; 0x09
    2fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e8       	ldi	r20, 0x80	; 128
    2fe6:	5f e3       	ldi	r21, 0x3F	; 63
    2fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fec:	88 23       	and	r24, r24
    2fee:	2c f4       	brge	.+10     	; 0x2ffa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	9e 83       	std	Y+6, r25	; 0x06
    2ff6:	8d 83       	std	Y+5, r24	; 0x05
    2ff8:	3f c0       	rjmp	.+126    	; 0x3078 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffc:	78 85       	ldd	r23, Y+8	; 0x08
    2ffe:	89 85       	ldd	r24, Y+9	; 0x09
    3000:	9a 85       	ldd	r25, Y+10	; 0x0a
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	3f ef       	ldi	r19, 0xFF	; 255
    3006:	4f e7       	ldi	r20, 0x7F	; 127
    3008:	57 e4       	ldi	r21, 0x47	; 71
    300a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    300e:	18 16       	cp	r1, r24
    3010:	4c f5       	brge	.+82     	; 0x3064 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3012:	6b 85       	ldd	r22, Y+11	; 0x0b
    3014:	7c 85       	ldd	r23, Y+12	; 0x0c
    3016:	8d 85       	ldd	r24, Y+13	; 0x0d
    3018:	9e 85       	ldd	r25, Y+14	; 0x0e
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e2       	ldi	r20, 0x20	; 32
    3020:	51 e4       	ldi	r21, 0x41	; 65
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	bc 01       	movw	r22, r24
    302c:	cd 01       	movw	r24, r26
    302e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	8d 83       	std	Y+5, r24	; 0x05
    303a:	0f c0       	rjmp	.+30     	; 0x305a <LCD_displayCharacter+0x8ac>
    303c:	88 ec       	ldi	r24, 0xC8	; 200
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <LCD_displayCharacter+0x89a>
    304c:	9c 83       	std	Y+4, r25	; 0x04
    304e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3050:	8d 81       	ldd	r24, Y+5	; 0x05
    3052:	9e 81       	ldd	r25, Y+6	; 0x06
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	9e 83       	std	Y+6, r25	; 0x06
    3058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305a:	8d 81       	ldd	r24, Y+5	; 0x05
    305c:	9e 81       	ldd	r25, Y+6	; 0x06
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	69 f7       	brne	.-38     	; 0x303c <LCD_displayCharacter+0x88e>
    3062:	14 c0       	rjmp	.+40     	; 0x308c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3064:	6f 81       	ldd	r22, Y+7	; 0x07
    3066:	78 85       	ldd	r23, Y+8	; 0x08
    3068:	89 85       	ldd	r24, Y+9	; 0x09
    306a:	9a 85       	ldd	r25, Y+10	; 0x0a
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9e 83       	std	Y+6, r25	; 0x06
    3076:	8d 83       	std	Y+5, r24	; 0x05
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	9a 81       	ldd	r25, Y+2	; 0x02
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_displayCharacter+0x8d6>
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    308c:	cd 59       	subi	r28, 0x9D	; 157
    308e:	df 4f       	sbci	r29, 0xFF	; 255
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <LCD_displayString+0x6>
    30aa:	0f 92       	push	r0
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9b 83       	std	Y+3, r25	; 0x03
    30b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30b4:	19 82       	std	Y+1, r1	; 0x01
    30b6:	0e c0       	rjmp	.+28     	; 0x30d4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	28 2f       	mov	r18, r24
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	9b 81       	ldd	r25, Y+3	; 0x03
    30c2:	fc 01       	movw	r30, r24
    30c4:	e2 0f       	add	r30, r18
    30c6:	f3 1f       	adc	r31, r19
    30c8:	80 81       	ld	r24, Z
    30ca:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_displayCharacter>
		i++;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	8f 5f       	subi	r24, 0xFF	; 255
    30d2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	9b 81       	ldd	r25, Y+3	; 0x03
    30de:	fc 01       	movw	r30, r24
    30e0:	e2 0f       	add	r30, r18
    30e2:	f3 1f       	adc	r31, r19
    30e4:	80 81       	ld	r24, Z
    30e6:	88 23       	and	r24, r24
    30e8:	39 f7       	brne	.-50     	; 0x30b8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <LCD_moveCursor+0x6>
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <LCD_moveCursor+0x8>
    30fe:	0f 92       	push	r0
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	8a 83       	std	Y+2, r24	; 0x02
    3106:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	28 2f       	mov	r18, r24
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	3d 83       	std	Y+5, r19	; 0x05
    3110:	2c 83       	std	Y+4, r18	; 0x04
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	9d 81       	ldd	r25, Y+5	; 0x05
    3116:	81 30       	cpi	r24, 0x01	; 1
    3118:	91 05       	cpc	r25, r1
    311a:	c1 f0       	breq	.+48     	; 0x314c <LCD_moveCursor+0x56>
    311c:	2c 81       	ldd	r18, Y+4	; 0x04
    311e:	3d 81       	ldd	r19, Y+5	; 0x05
    3120:	22 30       	cpi	r18, 0x02	; 2
    3122:	31 05       	cpc	r19, r1
    3124:	2c f4       	brge	.+10     	; 0x3130 <LCD_moveCursor+0x3a>
    3126:	8c 81       	ldd	r24, Y+4	; 0x04
    3128:	9d 81       	ldd	r25, Y+5	; 0x05
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	61 f0       	breq	.+24     	; 0x3146 <LCD_moveCursor+0x50>
    312e:	19 c0       	rjmp	.+50     	; 0x3162 <LCD_moveCursor+0x6c>
    3130:	2c 81       	ldd	r18, Y+4	; 0x04
    3132:	3d 81       	ldd	r19, Y+5	; 0x05
    3134:	22 30       	cpi	r18, 0x02	; 2
    3136:	31 05       	cpc	r19, r1
    3138:	69 f0       	breq	.+26     	; 0x3154 <LCD_moveCursor+0x5e>
    313a:	8c 81       	ldd	r24, Y+4	; 0x04
    313c:	9d 81       	ldd	r25, Y+5	; 0x05
    313e:	83 30       	cpi	r24, 0x03	; 3
    3140:	91 05       	cpc	r25, r1
    3142:	61 f0       	breq	.+24     	; 0x315c <LCD_moveCursor+0x66>
    3144:	0e c0       	rjmp	.+28     	; 0x3162 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3146:	8b 81       	ldd	r24, Y+3	; 0x03
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	0b c0       	rjmp	.+22     	; 0x3162 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	80 5c       	subi	r24, 0xC0	; 192
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	07 c0       	rjmp	.+14     	; 0x3162 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	80 5f       	subi	r24, 0xF0	; 240
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    315c:	8b 81       	ldd	r24, Y+3	; 0x03
    315e:	80 5b       	subi	r24, 0xB0	; 176
    3160:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	80 68       	ori	r24, 0x80	; 128
    3166:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret

0000317a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    317a:	df 93       	push	r29
    317c:	cf 93       	push	r28
    317e:	00 d0       	rcall	.+0      	; 0x3180 <LCD_displayStringRowColumn+0x6>
    3180:	00 d0       	rcall	.+0      	; 0x3182 <LCD_displayStringRowColumn+0x8>
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	6a 83       	std	Y+2, r22	; 0x02
    318a:	5c 83       	std	Y+4, r21	; 0x04
    318c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	6a 81       	ldd	r22, Y+2	; 0x02
    3192:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	0e 94 52 18 	call	0x30a4	; 0x30a4 <LCD_displayString>
}
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    31ac:	df 93       	push	r29
    31ae:	cf 93       	push	r28
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	62 97       	sbiw	r28, 0x12	; 18
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    31c0:	9a 8b       	std	Y+18, r25	; 0x12
    31c2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    31c4:	89 89       	ldd	r24, Y+17	; 0x11
    31c6:	9a 89       	ldd	r25, Y+18	; 0x12
    31c8:	9e 01       	movw	r18, r28
    31ca:	2f 5f       	subi	r18, 0xFF	; 255
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	b9 01       	movw	r22, r18
    31d0:	4a e0       	ldi	r20, 0x0A	; 10
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <itoa>
   LCD_displayString(buff); /* Display the string */
    31d8:	ce 01       	movw	r24, r28
    31da:	01 96       	adiw	r24, 0x01	; 1
    31dc:	0e 94 52 18 	call	0x30a4	; 0x30a4 <LCD_displayString>
}
    31e0:	62 96       	adiw	r28, 0x12	; 18
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	cf 91       	pop	r28
    31ee:	df 91       	pop	r29
    31f0:	08 95       	ret

000031f2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
}
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <PWM_Timer0_Generate>:
#include "pwm.h"
#include "gpio.h" /* to use GPIO_setupPinDirection function*/

/* function responsible for generate pwm signal using timer0 with different duty cycles*/
void PWM_Timer0_Generate(uint8 duty_cycle)
{
    3206:	0f 93       	push	r16
    3208:	1f 93       	push	r17
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	0f 92       	push	r0
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    3216:	e2 e5       	ldi	r30, 0x52	; 82
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	10 82       	st	Z, r1

	if(duty_cycle <100)
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	84 36       	cpi	r24, 0x64	; 100
    3220:	c0 f4       	brcc	.+48     	; 0x3252 <PWM_Timer0_Generate+0x4c>
		OCR0  = (uint8)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    3222:	0c e5       	ldi	r16, 0x5C	; 92
    3224:	10 e0       	ldi	r17, 0x00	; 0
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	88 2f       	mov	r24, r24
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a0 e0       	ldi	r26, 0x00	; 0
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	ba 2f       	mov	r27, r26
    3232:	a9 2f       	mov	r26, r25
    3234:	98 2f       	mov	r25, r24
    3236:	88 27       	eor	r24, r24
    3238:	24 e6       	ldi	r18, 0x64	; 100
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodsi4>
    3248:	da 01       	movw	r26, r20
    324a:	c9 01       	movw	r24, r18
    324c:	f8 01       	movw	r30, r16
    324e:	80 83       	st	Z, r24
    3250:	07 c0       	rjmp	.+14     	; 0x3260 <PWM_Timer0_Generate+0x5a>
	else if (duty_cycle ==100)
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	84 36       	cpi	r24, 0x64	; 100
    3256:	21 f4       	brne	.+8      	; 0x3260 <PWM_Timer0_Generate+0x5a>
		OCR0=255; /*to avoid the overflow (256 exceed the range of uint8)*/
    3258:	ec e5       	ldi	r30, 0x5C	; 92
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	8f ef       	ldi	r24, 0xFF	; 255
    325e:	80 83       	st	Z, r24

	GPIO_setupPinDirection(pwm0_PORT_ID,pwm0_PIN_ID,PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	63 e0       	ldi	r22, 0x03	; 3
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    326a:	e3 e5       	ldi	r30, 0x53	; 83
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	8a e6       	ldi	r24, 0x6A	; 106
    3270:	80 83       	st	Z, r24
}
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	08 95       	ret

0000327e <PWM_Timer2_Generate>:

/* function responsible for generate pwm signal using timer2 with different duty cycles*/
void PWM_Timer2_Generate(uint8 duty_cycle)
{
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	0f 92       	push	r0
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	89 83       	std	Y+1, r24	; 0x01

	TCNT2 = 0; // Set Timer Initial Value to 0
    328e:	e4 e4       	ldi	r30, 0x44	; 68
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	10 82       	st	Z, r1

	if(duty_cycle <100)
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	84 36       	cpi	r24, 0x64	; 100
    3298:	c0 f4       	brcc	.+48     	; 0x32ca <PWM_Timer2_Generate+0x4c>
		OCR2  = (uint8)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    329a:	03 e4       	ldi	r16, 0x43	; 67
    329c:	10 e0       	ldi	r17, 0x00	; 0
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	88 2f       	mov	r24, r24
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	a0 e0       	ldi	r26, 0x00	; 0
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	ba 2f       	mov	r27, r26
    32aa:	a9 2f       	mov	r26, r25
    32ac:	98 2f       	mov	r25, r24
    32ae:	88 27       	eor	r24, r24
    32b0:	24 e6       	ldi	r18, 0x64	; 100
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodsi4>
    32c0:	da 01       	movw	r26, r20
    32c2:	c9 01       	movw	r24, r18
    32c4:	f8 01       	movw	r30, r16
    32c6:	80 83       	st	Z, r24
    32c8:	07 c0       	rjmp	.+14     	; 0x32d8 <PWM_Timer2_Generate+0x5a>
	else if (duty_cycle ==100)
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	84 36       	cpi	r24, 0x64	; 100
    32ce:	21 f4       	brne	.+8      	; 0x32d8 <PWM_Timer2_Generate+0x5a>
		OCR2=255; /*to avoid the overflow (256 exceed the range of uint8)*/
    32d0:	e3 e4       	ldi	r30, 0x43	; 67
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	8f ef       	ldi	r24, 0xFF	; 255
    32d6:	80 83       	st	Z, r24

	GPIO_setupPinDirection(pwm2_PORT_ID,pwm2_PIN_ID,PIN_OUTPUT); // Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC
    32d8:	83 e0       	ldi	r24, 0x03	; 3
    32da:	67 e0       	ldi	r22, 0x07	; 7
    32dc:	41 e0       	ldi	r20, 0x01	; 1
    32de:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM21=1 & WGM20=1
	 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
	 * 4. clock = F_CPU/8 CS20=0 CS21=1 CS22=0
	 */
	TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS21);
    32e2:	e5 e4       	ldi	r30, 0x45	; 69
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	8a e6       	ldi	r24, 0x6A	; 106
    32e8:	80 83       	st	Z, r24
}
    32ea:	0f 90       	pop	r0
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	08 95       	ret

000032f6 <PWM_vInit_T1_FastMode>:

/*Function responsible for initializing the timer1 for pwm in fast mode */
void PWM_vInit_T1_FastMode()
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
	
		//we made it CLR on compare to get the desired correct signal for servo
		// Make OC1A pin as output
		GPIO_setupPinDirection(PORTD_ID, PIN_NO_5,OUTPUT);
    32fe:	83 e0       	ldi	r24, 0x03	; 3
    3300:	65 e0       	ldi	r22, 0x05	; 5
    3302:	41 e0       	ldi	r20, 0x01	; 1
    3304:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>
		//checked  //Set timer1 count zero
		TCNT1 = 0 ;			
    3308:	ec e4       	ldi	r30, 0x4C	; 76
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	11 82       	std	Z+1, r1	; 0x01
    330e:	10 82       	st	Z, r1
		//for frequency 50Hz  // Set TOP count for timer1 in ICR1 register
		ICR1 = 2499 ; 
    3310:	e6 e4       	ldi	r30, 0x46	; 70
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	83 ec       	ldi	r24, 0xC3	; 195
    3316:	99 e0       	ldi	r25, 0x09	; 9
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
		//Set Fast PWM, TOP in ICR1, Clr OC1A on compare match, Clk/64
		TCCR1A = (1<<PIN_NO_7) |  (1<<PIN_NO_1) ;
    331c:	ef e4       	ldi	r30, 0x4F	; 79
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	82 e8       	ldi	r24, 0x82	; 130
    3322:	80 83       	st	Z, r24
		TCCR1B = (1<<PIN_NO_3) | (1<<PIN_NO_4) | (1<<PIN_NO_0) | (1<<PIN_NO_1) ;
    3324:	ee e4       	ldi	r30, 0x4E	; 78
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	8b e1       	ldi	r24, 0x1B	; 27
    332a:	80 83       	st	Z, r24

	
}
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <PWM_vSetValue_ICR1_T1_Manual>:

/*Function responsible for assining a value in ICR1 REG*/
void PWM_vSetValue_ICR1_T1_Manual(uint16 copy_u16Value)
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	00 d0       	rcall	.+0      	; 0x3338 <PWM_vSetValue_ICR1_T1_Manual+0x6>
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1 = copy_u16Value ;
    3340:	e6 e4       	ldi	r30, 0x46	; 70
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	9a 81       	ldd	r25, Y+2	; 0x02
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	80 83       	st	Z, r24
	
}
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <PWM_vSetValue_OCR1A_T1_Manual>:

/*Function responsible for assining a value in OCR1A REG */
void PWM_vSetValue_OCR1A_T1_Manual(uint16 copy_u16Value)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	00 d0       	rcall	.+0      	; 0x335c <PWM_vSetValue_OCR1A_T1_Manual+0x6>
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
		OCR1A = copy_u16Value ;
    3364:	ea e4       	ldi	r30, 0x4A	; 74
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	9a 81       	ldd	r25, Y+2	; 0x02
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	80 83       	st	Z, r24
}
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <Timer1_Fast_PWM_Init>:

void Timer1_Fast_PWM_Init(unsigned short duty_cycle)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	00 d0       	rcall	.+0      	; 0x3380 <Timer1_Fast_PWM_Init+0x6>
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    3388:	ec e4       	ldi	r30, 0x4C	; 76
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	11 82       	std	Z+1, r1	; 0x01
    338e:	10 82       	st	Z, r1
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
    3390:	e6 e4       	ldi	r30, 0x46	; 70
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	83 ec       	ldi	r24, 0xC3	; 195
    3396:	99 e0       	ldi	r25, 0x09	; 9
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24

	OCR1A = duty_cycle; /* Set the compare value */
    339c:	ea e4       	ldi	r30, 0x4A	; 74
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	9a 81       	ldd	r25, Y+2	; 0x02
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	80 83       	st	Z, r24
     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
     * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	 */
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
    33a8:	ef e4       	ldi	r30, 0x4F	; 79
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	82 e8       	ldi	r24, 0x82	; 130
    33ae:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/64
     */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS10) | (1<<CS11);
    33b0:	ee e4       	ldi	r30, 0x4E	; 78
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	8b e1       	ldi	r24, 0x1B	; 27
    33b6:	80 83       	st	Z, r24
}
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <UART_init+0x6>
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <UART_init+0x8>
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	9c 83       	std	Y+4, r25	; 0x04
    33d0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    33d2:	1a 82       	std	Y+2, r1	; 0x02
    33d4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    33d6:	eb e2       	ldi	r30, 0x2B	; 43
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	82 e0       	ldi	r24, 0x02	; 2
    33dc:	80 83       	st	Z, r24

	/*enable the transmitter and the reciever */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    33de:	aa e2       	ldi	r26, 0x2A	; 42
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	ea e2       	ldi	r30, 0x2A	; 42
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	88 61       	ori	r24, 0x18	; 24
    33ea:	8c 93       	st	X, r24

	/*insert the character size bit in UCSZ2 */
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data &0x04);
    33ec:	aa e2       	ldi	r26, 0x2A	; 42
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	ea e2       	ldi	r30, 0x2A	; 42
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	98 2f       	mov	r25, r24
    33f8:	9b 7f       	andi	r25, 0xFB	; 251
    33fa:	eb 81       	ldd	r30, Y+3	; 0x03
    33fc:	fc 81       	ldd	r31, Y+4	; 0x04
    33fe:	80 81       	ld	r24, Z
    3400:	84 70       	andi	r24, 0x04	; 4
    3402:	89 2b       	or	r24, r25
    3404:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    3406:	a0 e4       	ldi	r26, 0x40	; 64
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e0 e4       	ldi	r30, 0x40	; 64
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	80 68       	ori	r24, 0x80	; 128
    3412:	8c 93       	st	X, r24

	/*insert the character size bits in UCSZ1 and UCSZ0*/
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data &0x03)<<1);
    3414:	a0 e4       	ldi	r26, 0x40	; 64
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e0 e4       	ldi	r30, 0x40	; 64
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	28 2f       	mov	r18, r24
    3420:	29 7f       	andi	r18, 0xF9	; 249
    3422:	eb 81       	ldd	r30, Y+3	; 0x03
    3424:	fc 81       	ldd	r31, Y+4	; 0x04
    3426:	80 81       	ld	r24, Z
    3428:	88 2f       	mov	r24, r24
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	83 70       	andi	r24, 0x03	; 3
    342e:	90 70       	andi	r25, 0x00	; 0
    3430:	88 0f       	add	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	82 2b       	or	r24, r18
    3436:	8c 93       	st	X, r24

	/*insert the parity mode bits in UPM1 and UPM0*/
	UCSRC=(UCSRC&0xCF)|(Config_Ptr->parity <<4);
    3438:	a0 e4       	ldi	r26, 0x40	; 64
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e0 e4       	ldi	r30, 0x40	; 64
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	80 81       	ld	r24, Z
    3442:	28 2f       	mov	r18, r24
    3444:	2f 7c       	andi	r18, 0xCF	; 207
    3446:	eb 81       	ldd	r30, Y+3	; 0x03
    3448:	fc 81       	ldd	r31, Y+4	; 0x04
    344a:	81 81       	ldd	r24, Z+1	; 0x01
    344c:	88 2f       	mov	r24, r24
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	82 95       	swap	r24
    3452:	92 95       	swap	r25
    3454:	90 7f       	andi	r25, 0xF0	; 240
    3456:	98 27       	eor	r25, r24
    3458:	80 7f       	andi	r24, 0xF0	; 240
    345a:	98 27       	eor	r25, r24
    345c:	82 2b       	or	r24, r18
    345e:	8c 93       	st	X, r24

	/*insert number of stop bits in USBS*/
	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<3);
    3460:	a0 e4       	ldi	r26, 0x40	; 64
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	e0 e4       	ldi	r30, 0x40	; 64
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	28 2f       	mov	r18, r24
    346c:	27 7f       	andi	r18, 0xF7	; 247
    346e:	eb 81       	ldd	r30, Y+3	; 0x03
    3470:	fc 81       	ldd	r31, Y+4	; 0x04
    3472:	82 81       	ldd	r24, Z+2	; 0x02
    3474:	88 2f       	mov	r24, r24
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	82 2b       	or	r24, r18
    3486:	8c 93       	st	X, r24
	
	if(Config_Ptr->bit_data ==Nine_Bits)
    3488:	eb 81       	ldd	r30, Y+3	; 0x03
    348a:	fc 81       	ldd	r31, Y+4	; 0x04
    348c:	80 81       	ld	r24, Z
    348e:	87 30       	cpi	r24, 0x07	; 7
    3490:	39 f4       	brne	.+14     	; 0x34a0 <UART_init+0xde>
	{
		/*Enable reception and transmission of 9-bit serial data*/
		UCSRB |= (1<<RXB8)|(1<<TXB8);
    3492:	aa e2       	ldi	r26, 0x2A	; 42
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	ea e2       	ldi	r30, 0x2A	; 42
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	83 60       	ori	r24, 0x03	; 3
    349e:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRate * 8UL))) - 1);
    34a0:	eb 81       	ldd	r30, Y+3	; 0x03
    34a2:	fc 81       	ldd	r31, Y+4	; 0x04
    34a4:	83 81       	ldd	r24, Z+3	; 0x03
    34a6:	94 81       	ldd	r25, Z+4	; 0x04
    34a8:	a5 81       	ldd	r26, Z+5	; 0x05
    34aa:	b6 81       	ldd	r27, Z+6	; 0x06
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	aa 1f       	adc	r26, r26
    34b2:	bb 1f       	adc	r27, r27
    34b4:	88 0f       	add	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	aa 1f       	adc	r26, r26
    34ba:	bb 1f       	adc	r27, r27
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	aa 1f       	adc	r26, r26
    34c2:	bb 1f       	adc	r27, r27
    34c4:	9c 01       	movw	r18, r24
    34c6:	ad 01       	movw	r20, r26
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	92 e1       	ldi	r25, 0x12	; 18
    34cc:	aa e7       	ldi	r26, 0x7A	; 122
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	bc 01       	movw	r22, r24
    34d2:	cd 01       	movw	r24, r26
    34d4:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodsi4>
    34d8:	da 01       	movw	r26, r20
    34da:	c9 01       	movw	r24, r18
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	9a 83       	std	Y+2, r25	; 0x02
    34e0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    34e2:	e0 e4       	ldi	r30, 0x40	; 64
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	89 2f       	mov	r24, r25
    34ec:	99 27       	eor	r25, r25
    34ee:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    34f0:	e9 e2       	ldi	r30, 0x29	; 41
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	80 83       	st	Z, r24
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	0f 92       	push	r0
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3512:	eb e2       	ldi	r30, 0x2B	; 43
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	88 2f       	mov	r24, r24
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	80 72       	andi	r24, 0x20	; 32
    351e:	90 70       	andi	r25, 0x00	; 0
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	b9 f3       	breq	.-18     	; 0x3512 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3524:	ec e2       	ldi	r30, 0x2C	; 44
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    352c:	0f 90       	pop	r0
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    353c:	eb e2       	ldi	r30, 0x2B	; 43
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	88 23       	and	r24, r24
    3544:	dc f7       	brge	.-10     	; 0x353c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3546:	ec e2       	ldi	r30, 0x2C	; 44
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
}
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	08 95       	ret

00003552 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3552:	df 93       	push	r29
    3554:	cf 93       	push	r28
    3556:	00 d0       	rcall	.+0      	; 0x3558 <UART_sendString+0x6>
    3558:	0f 92       	push	r0
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	9b 83       	std	Y+3, r25	; 0x03
    3560:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3562:	19 82       	std	Y+1, r1	; 0x01
    3564:	0e c0       	rjmp	.+28     	; 0x3582 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	28 2f       	mov	r18, r24
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	9b 81       	ldd	r25, Y+3	; 0x03
    3570:	fc 01       	movw	r30, r24
    3572:	e2 0f       	add	r30, r18
    3574:	f3 1f       	adc	r31, r19
    3576:	80 81       	ld	r24, Z
    3578:	0e 94 83 1a 	call	0x3506	; 0x3506 <UART_sendByte>
		i++;
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	9b 81       	ldd	r25, Y+3	; 0x03
    358c:	fc 01       	movw	r30, r24
    358e:	e2 0f       	add	r30, r18
    3590:	f3 1f       	adc	r31, r19
    3592:	80 81       	ld	r24, Z
    3594:	88 23       	and	r24, r24
    3596:	39 f7       	brne	.-50     	; 0x3566 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <UART_sendArray>:
void UART_sendArray(const uint8*arr,uint8 size)
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <UART_sendArray+0x6>
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <UART_sendArray+0x8>
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	9b 83       	std	Y+3, r25	; 0x03
    35b2:	8a 83       	std	Y+2, r24	; 0x02
    35b4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    35b6:	19 82       	std	Y+1, r1	; 0x01
    35b8:	0e c0       	rjmp	.+28     	; 0x35d6 <UART_sendArray+0x32>
	{
		UART_sendByte(arr[i]);
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	9b 81       	ldd	r25, Y+3	; 0x03
    35c4:	fc 01       	movw	r30, r24
    35c6:	e2 0f       	add	r30, r18
    35c8:	f3 1f       	adc	r31, r19
    35ca:	80 81       	ld	r24, Z
    35cc:	0e 94 83 1a 	call	0x3506	; 0x3506 <UART_sendByte>
	*******************************************************************/
}
void UART_sendArray(const uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	8f 5f       	subi	r24, 0xFF	; 255
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	99 81       	ldd	r25, Y+1	; 0x01
    35d8:	8c 81       	ldd	r24, Y+4	; 0x04
    35da:	98 17       	cp	r25, r24
    35dc:	70 f3       	brcs	.-36     	; 0x35ba <UART_sendArray+0x16>
	{
		UART_sendByte(arr[i]);
	}
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <UART_receiveString+0xa>
    35f6:	0f 92       	push	r0
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	9b 83       	std	Y+3, r25	; 0x03
    35fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3600:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	28 2f       	mov	r18, r24
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	9b 81       	ldd	r25, Y+3	; 0x03
    360c:	8c 01       	movw	r16, r24
    360e:	02 0f       	add	r16, r18
    3610:	13 1f       	adc	r17, r19
    3612:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_recieveByte>
    3616:	f8 01       	movw	r30, r16
    3618:	80 83       	st	Z, r24
    361a:	0f c0       	rjmp	.+30     	; 0x363a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	8f 5f       	subi	r24, 0xFF	; 255
    3620:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	28 2f       	mov	r18, r24
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	9b 81       	ldd	r25, Y+3	; 0x03
    362c:	8c 01       	movw	r16, r24
    362e:	02 0f       	add	r16, r18
    3630:	13 1f       	adc	r17, r19
    3632:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_recieveByte>
    3636:	f8 01       	movw	r30, r16
    3638:	80 83       	st	Z, r24

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	fc 01       	movw	r30, r24
    3646:	e2 0f       	add	r30, r18
    3648:	f3 1f       	adc	r31, r19
    364a:	80 81       	ld	r24, Z
    364c:	83 32       	cpi	r24, 0x23	; 35
    364e:	31 f7       	brne	.-52     	; 0x361c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	8a 81       	ldd	r24, Y+2	; 0x02
    3658:	9b 81       	ldd	r25, Y+3	; 0x03
    365a:	fc 01       	movw	r30, r24
    365c:	e2 0f       	add	r30, r18
    365e:	f3 1f       	adc	r31, r19
    3660:	10 82       	st	Z, r1
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <UART_receiveArray>:
void UART_receiveArray(uint8*arr,uint8 size)
{
    3672:	0f 93       	push	r16
    3674:	1f 93       	push	r17
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	00 d0       	rcall	.+0      	; 0x367c <UART_receiveArray+0xa>
    367c:	00 d0       	rcall	.+0      	; 0x367e <UART_receiveArray+0xc>
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	9b 83       	std	Y+3, r25	; 0x03
    3684:	8a 83       	std	Y+2, r24	; 0x02
    3686:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    3688:	19 82       	std	Y+1, r1	; 0x01
    368a:	0f c0       	rjmp	.+30     	; 0x36aa <UART_receiveArray+0x38>
	{
		arr[i]=UART_recieveByte();
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	9b 81       	ldd	r25, Y+3	; 0x03
    3696:	8c 01       	movw	r16, r24
    3698:	02 0f       	add	r16, r18
    369a:	13 1f       	adc	r17, r19
    369c:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_recieveByte>
    36a0:	f8 01       	movw	r30, r16
    36a2:	80 83       	st	Z, r24
	Str[i] = '\0';
}
void UART_receiveArray(uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	8f 5f       	subi	r24, 0xFF	; 255
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	99 81       	ldd	r25, Y+1	; 0x01
    36ac:	8c 81       	ldd	r24, Y+4	; 0x04
    36ae:	98 17       	cp	r25, r24
    36b0:	68 f3       	brcs	.-38     	; 0x368c <UART_receiveArray+0x1a>
	{
		arr[i]=UART_recieveByte();
	}

}
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	08 95       	ret

000036c4 <Ultrasonic_init>:
/*function responsible for intitialize the icu and set its callback function */
void Ultrasonic_init(uint8 ULTRASONIC_number_TIRGGER_PORT_ID,
					 uint8 ULTRASONIC_number_TIRGGER_PIN_ID,
					 uint8 ULTRASONIC_number_ECHO_PORT_ID,
					 uint8 ULTRASONIC_number_ECHO_PIN_ID)
{
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	00 d0       	rcall	.+0      	; 0x36ca <Ultrasonic_init+0x6>
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <Ultrasonic_init+0x8>
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <Ultrasonic_init+0xa>
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	8b 83       	std	Y+3, r24	; 0x03
    36d4:	6c 83       	std	Y+4, r22	; 0x04
    36d6:	4d 83       	std	Y+5, r20	; 0x05
    36d8:	2e 83       	std	Y+6, r18	; 0x06
	/* Create configuration structure for ICU driver */
	ICU_ConfigType ICU_Configurations = {F_CPU_8,RAISING};
    36da:	82 e0       	ldi	r24, 0x02	; 2
    36dc:	89 83       	std	Y+1, r24	; 0x01
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	8a 83       	std	Y+2, r24	; 0x02

	/* Configure the direction for trigger pin as output pin */
	GPIO_setupPinDirection(ULTRASONIC_number_TIRGGER_PORT_ID,ULTRASONIC_number_TIRGGER_PIN_ID,PIN_OUTPUT);
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	6c 81       	ldd	r22, Y+4	; 0x04
    36e6:	41 e0       	ldi	r20, 0x01	; 1
    36e8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>

	/* Configure ECHO pin as input pin (this line not necessary because icu do it automatically)*/
	GPIO_setupPinDirection(ULTRASONIC_number_ECHO_PORT_ID,ULTRASONIC_number_ECHO_PIN_ID,PIN_INPUT);
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	6e 81       	ldd	r22, Y+6	; 0x06
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <GPIO_setupPinDirection>

	/* Initialize the ICU driver by passing the configuration structure to it*/
	ICU_init(&ICU_Configurations);
    36f6:	ce 01       	movw	r24, r28
    36f8:	01 96       	adiw	r24, 0x01	; 1
    36fa:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <ICU_init>

	/* Set the Call back function pointer in the ICU driver */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    36fe:	8b e8       	ldi	r24, 0x8B	; 139
    3700:	9c e1       	ldi	r25, 0x1C	; 28
    3702:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <ICU_setCallBack>
}
    3706:	26 96       	adiw	r28, 0x06	; 6
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <Ultrasonic_Trigger>:

/*function responsible for send trigger pulse on the trigger pin*/
void Ultrasonic_Trigger(uint8 ULTRASONIC_number_TIRGGER_PORT_ID,uint8 ULTRASONIC_number_TIRGGER_PIN_ID)
{
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	6a 97       	sbiw	r28, 0x1a	; 26
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	89 8f       	std	Y+25, r24	; 0x19
    372e:	6a 8f       	std	Y+26, r22	; 0x1a
	/* output a trigger pulse on trigger pin for 10 us */
	GPIO_writePin(ULTRASONIC_number_TIRGGER_PORT_ID,ULTRASONIC_number_TIRGGER_PIN_ID,LOGIC_HIGH);
    3730:	89 8d       	ldd	r24, Y+25	; 0x19
    3732:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	a0 e2       	ldi	r26, 0x20	; 32
    3740:	b1 e4       	ldi	r27, 0x41	; 65
    3742:	8d 8b       	std	Y+21, r24	; 0x15
    3744:	9e 8b       	std	Y+22, r25	; 0x16
    3746:	af 8b       	std	Y+23, r26	; 0x17
    3748:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    374a:	6d 89       	ldd	r22, Y+21	; 0x15
    374c:	7e 89       	ldd	r23, Y+22	; 0x16
    374e:	8f 89       	ldd	r24, Y+23	; 0x17
    3750:	98 8d       	ldd	r25, Y+24	; 0x18
    3752:	2b ea       	ldi	r18, 0xAB	; 171
    3754:	3a ea       	ldi	r19, 0xAA	; 170
    3756:	4a e2       	ldi	r20, 0x2A	; 42
    3758:	50 e4       	ldi	r21, 0x40	; 64
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	89 8b       	std	Y+17, r24	; 0x11
    3764:	9a 8b       	std	Y+18, r25	; 0x12
    3766:	ab 8b       	std	Y+19, r26	; 0x13
    3768:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    376a:	69 89       	ldd	r22, Y+17	; 0x11
    376c:	7a 89       	ldd	r23, Y+18	; 0x12
    376e:	8b 89       	ldd	r24, Y+19	; 0x13
    3770:	9c 89       	ldd	r25, Y+20	; 0x14
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	40 e8       	ldi	r20, 0x80	; 128
    3778:	5f e3       	ldi	r21, 0x3F	; 63
    377a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    377e:	88 23       	and	r24, r24
    3780:	1c f4       	brge	.+6      	; 0x3788 <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	88 8b       	std	Y+16, r24	; 0x10
    3786:	91 c0       	rjmp	.+290    	; 0x38aa <Ultrasonic_Trigger+0x192>
	else if (__tmp > 255)
    3788:	69 89       	ldd	r22, Y+17	; 0x11
    378a:	7a 89       	ldd	r23, Y+18	; 0x12
    378c:	8b 89       	ldd	r24, Y+19	; 0x13
    378e:	9c 89       	ldd	r25, Y+20	; 0x14
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4f e7       	ldi	r20, 0x7F	; 127
    3796:	53 e4       	ldi	r21, 0x43	; 67
    3798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    379c:	18 16       	cp	r1, r24
    379e:	0c f0       	brlt	.+2      	; 0x37a2 <Ultrasonic_Trigger+0x8a>
    37a0:	7b c0       	rjmp	.+246    	; 0x3898 <Ultrasonic_Trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    37a2:	6d 89       	ldd	r22, Y+21	; 0x15
    37a4:	7e 89       	ldd	r23, Y+22	; 0x16
    37a6:	8f 89       	ldd	r24, Y+23	; 0x17
    37a8:	98 8d       	ldd	r25, Y+24	; 0x18
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	4a e7       	ldi	r20, 0x7A	; 122
    37b0:	54 e4       	ldi	r21, 0x44	; 68
    37b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	8c 87       	std	Y+12, r24	; 0x0c
    37bc:	9d 87       	std	Y+13, r25	; 0x0d
    37be:	ae 87       	std	Y+14, r26	; 0x0e
    37c0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    37c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    37c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    37c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a ef       	ldi	r20, 0xFA	; 250
    37d0:	54 e4       	ldi	r21, 0x44	; 68
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	88 87       	std	Y+8, r24	; 0x08
    37dc:	99 87       	std	Y+9, r25	; 0x09
    37de:	aa 87       	std	Y+10, r26	; 0x0a
    37e0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    37e2:	68 85       	ldd	r22, Y+8	; 0x08
    37e4:	79 85       	ldd	r23, Y+9	; 0x09
    37e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    37e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	2c f4       	brge	.+10     	; 0x3804 <Ultrasonic_Trigger+0xec>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	9f 83       	std	Y+7, r25	; 0x07
    3800:	8e 83       	std	Y+6, r24	; 0x06
    3802:	3f c0       	rjmp	.+126    	; 0x3882 <Ultrasonic_Trigger+0x16a>
	else if (__tmp > 65535)
    3804:	68 85       	ldd	r22, Y+8	; 0x08
    3806:	79 85       	ldd	r23, Y+9	; 0x09
    3808:	8a 85       	ldd	r24, Y+10	; 0x0a
    380a:	9b 85       	ldd	r25, Y+11	; 0x0b
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3818:	18 16       	cp	r1, r24
    381a:	4c f5       	brge	.+82     	; 0x386e <Ultrasonic_Trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381c:	6c 85       	ldd	r22, Y+12	; 0x0c
    381e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3820:	8e 85       	ldd	r24, Y+14	; 0x0e
    3822:	9f 85       	ldd	r25, Y+15	; 0x0f
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9f 83       	std	Y+7, r25	; 0x07
    3842:	8e 83       	std	Y+6, r24	; 0x06
    3844:	0f c0       	rjmp	.+30     	; 0x3864 <Ultrasonic_Trigger+0x14c>
    3846:	88 ec       	ldi	r24, 0xC8	; 200
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9d 83       	std	Y+5, r25	; 0x05
    384c:	8c 83       	std	Y+4, r24	; 0x04
    384e:	8c 81       	ldd	r24, Y+4	; 0x04
    3850:	9d 81       	ldd	r25, Y+5	; 0x05
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <Ultrasonic_Trigger+0x13a>
    3856:	9d 83       	std	Y+5, r25	; 0x05
    3858:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	8e 81       	ldd	r24, Y+6	; 0x06
    385c:	9f 81       	ldd	r25, Y+7	; 0x07
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	9f 83       	std	Y+7, r25	; 0x07
    3862:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3864:	8e 81       	ldd	r24, Y+6	; 0x06
    3866:	9f 81       	ldd	r25, Y+7	; 0x07
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	69 f7       	brne	.-38     	; 0x3846 <Ultrasonic_Trigger+0x12e>
    386c:	24 c0       	rjmp	.+72     	; 0x38b6 <Ultrasonic_Trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386e:	68 85       	ldd	r22, Y+8	; 0x08
    3870:	79 85       	ldd	r23, Y+9	; 0x09
    3872:	8a 85       	ldd	r24, Y+10	; 0x0a
    3874:	9b 85       	ldd	r25, Y+11	; 0x0b
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	9f 83       	std	Y+7, r25	; 0x07
    3880:	8e 83       	std	Y+6, r24	; 0x06
    3882:	8e 81       	ldd	r24, Y+6	; 0x06
    3884:	9f 81       	ldd	r25, Y+7	; 0x07
    3886:	9b 83       	std	Y+3, r25	; 0x03
    3888:	8a 83       	std	Y+2, r24	; 0x02
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	9b 81       	ldd	r25, Y+3	; 0x03
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <Ultrasonic_Trigger+0x176>
    3892:	9b 83       	std	Y+3, r25	; 0x03
    3894:	8a 83       	std	Y+2, r24	; 0x02
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <Ultrasonic_Trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3898:	69 89       	ldd	r22, Y+17	; 0x11
    389a:	7a 89       	ldd	r23, Y+18	; 0x12
    389c:	8b 89       	ldd	r24, Y+19	; 0x13
    389e:	9c 89       	ldd	r25, Y+20	; 0x14
    38a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	88 8b       	std	Y+16, r24	; 0x10
    38aa:	88 89       	ldd	r24, Y+16	; 0x10
    38ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	8a 95       	dec	r24
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <Ultrasonic_Trigger+0x198>
    38b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_number_TIRGGER_PORT_ID,ULTRASONIC_number_TIRGGER_PIN_ID,LOGIC_LOW);
    38b6:	89 8d       	ldd	r24, Y+25	; 0x19
    38b8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38ba:	40 e0       	ldi	r20, 0x00	; 0
    38bc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <GPIO_writePin>
}
    38c0:	6a 96       	adiw	r28, 0x1a	; 26
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	08 95       	ret

000038d2 <Ultrasonic_readDistance>:

/*function responsible for calculate the distance*/
uint16 Ultrasonic_readDistance(uint8 ULTRASONIC_number_TIRGGER_PORT_ID,uint8 ULTRASONIC_number_TIRGGER_PIN_ID)
{
    38d2:	df 93       	push	r29
    38d4:	cf 93       	push	r28
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <Ultrasonic_readDistance+0x6>
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	6a 83       	std	Y+2, r22	; 0x02
	/*send the trigger pulse on the trigger pin*/
	 Ultrasonic_Trigger(ULTRASONIC_number_TIRGGER_PORT_ID,ULTRASONIC_number_TIRGGER_PIN_ID);
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	6a 81       	ldd	r22, Y+2	; 0x02
    38e4:	0e 94 8c 1b 	call	0x3718	; 0x3718 <Ultrasonic_Trigger>

	/* timer increment every 1us
	 * distance=(340000*timer*1*10^-6)/2 cm =0.017*timer cm =timer/58.8 cm
	 * */
	g_distance=g_timeHigh/58;
    38e8:	80 91 75 00 	lds	r24, 0x0075
    38ec:	90 91 76 00 	lds	r25, 0x0076
    38f0:	2a e3       	ldi	r18, 0x3A	; 58
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	b9 01       	movw	r22, r18
    38f6:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodhi4>
    38fa:	cb 01       	movw	r24, r22
    38fc:	90 93 78 00 	sts	0x0078, r25
    3900:	80 93 77 00 	sts	0x0077, r24

	return g_distance;
    3904:	80 91 77 00 	lds	r24, 0x0077
    3908:	90 91 78 00 	lds	r25, 0x0078
}
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <Ultrasonic_edgeProcessing>:

/*call back function which is responsible for calculate the high time (pulse time) on echo pin*/
void Ultrasonic_edgeProcessing(void)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    391e:	80 91 74 00 	lds	r24, 0x0074
    3922:	8f 5f       	subi	r24, 0xFF	; 255
    3924:	80 93 74 00 	sts	0x0074, r24
	if(g_edgeCount == 1)/*here ,detected the rising edge*/
    3928:	80 91 74 00 	lds	r24, 0x0074
    392c:	81 30       	cpi	r24, 0x01	; 1
    392e:	31 f4       	brne	.+12     	; 0x393c <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue();/*start calculate the time from here*/
    3930:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <ICU_clearTimerValue>

		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ICU_setEdgeDetectionType>
    393a:	0f c0       	rjmp	.+30     	; 0x395a <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)/*here,detected the falling edge*/
    393c:	80 91 74 00 	lds	r24, 0x0074
    3940:	82 30       	cpi	r24, 0x02	; 2
    3942:	59 f4       	brne	.+22     	; 0x395a <Ultrasonic_edgeProcessing+0x44>
	{
		/*store the timer value (time take by the ultrasonic wave to travel and return)*/
		g_timeHigh=ICU_getInputCaptureValue();
    3944:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <ICU_getInputCaptureValue>
    3948:	90 93 76 00 	sts	0x0076, r25
    394c:	80 93 75 00 	sts	0x0075, r24

		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ICU_setEdgeDetectionType>

		/*clear the edge counter for the new measurement*/
		g_edgeCount=0;
    3956:	10 92 74 00 	sts	0x0074, r1
	}
}
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <__udivmodhi4>:
    3960:	aa 1b       	sub	r26, r26
    3962:	bb 1b       	sub	r27, r27
    3964:	51 e1       	ldi	r21, 0x11	; 17
    3966:	07 c0       	rjmp	.+14     	; 0x3976 <__udivmodhi4_ep>

00003968 <__udivmodhi4_loop>:
    3968:	aa 1f       	adc	r26, r26
    396a:	bb 1f       	adc	r27, r27
    396c:	a6 17       	cp	r26, r22
    396e:	b7 07       	cpc	r27, r23
    3970:	10 f0       	brcs	.+4      	; 0x3976 <__udivmodhi4_ep>
    3972:	a6 1b       	sub	r26, r22
    3974:	b7 0b       	sbc	r27, r23

00003976 <__udivmodhi4_ep>:
    3976:	88 1f       	adc	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	5a 95       	dec	r21
    397c:	a9 f7       	brne	.-22     	; 0x3968 <__udivmodhi4_loop>
    397e:	80 95       	com	r24
    3980:	90 95       	com	r25
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	08 95       	ret

00003988 <__udivmodsi4>:
    3988:	a1 e2       	ldi	r26, 0x21	; 33
    398a:	1a 2e       	mov	r1, r26
    398c:	aa 1b       	sub	r26, r26
    398e:	bb 1b       	sub	r27, r27
    3990:	fd 01       	movw	r30, r26
    3992:	0d c0       	rjmp	.+26     	; 0x39ae <__udivmodsi4_ep>

00003994 <__udivmodsi4_loop>:
    3994:	aa 1f       	adc	r26, r26
    3996:	bb 1f       	adc	r27, r27
    3998:	ee 1f       	adc	r30, r30
    399a:	ff 1f       	adc	r31, r31
    399c:	a2 17       	cp	r26, r18
    399e:	b3 07       	cpc	r27, r19
    39a0:	e4 07       	cpc	r30, r20
    39a2:	f5 07       	cpc	r31, r21
    39a4:	20 f0       	brcs	.+8      	; 0x39ae <__udivmodsi4_ep>
    39a6:	a2 1b       	sub	r26, r18
    39a8:	b3 0b       	sbc	r27, r19
    39aa:	e4 0b       	sbc	r30, r20
    39ac:	f5 0b       	sbc	r31, r21

000039ae <__udivmodsi4_ep>:
    39ae:	66 1f       	adc	r22, r22
    39b0:	77 1f       	adc	r23, r23
    39b2:	88 1f       	adc	r24, r24
    39b4:	99 1f       	adc	r25, r25
    39b6:	1a 94       	dec	r1
    39b8:	69 f7       	brne	.-38     	; 0x3994 <__udivmodsi4_loop>
    39ba:	60 95       	com	r22
    39bc:	70 95       	com	r23
    39be:	80 95       	com	r24
    39c0:	90 95       	com	r25
    39c2:	9b 01       	movw	r18, r22
    39c4:	ac 01       	movw	r20, r24
    39c6:	bd 01       	movw	r22, r26
    39c8:	cf 01       	movw	r24, r30
    39ca:	08 95       	ret

000039cc <__prologue_saves__>:
    39cc:	2f 92       	push	r2
    39ce:	3f 92       	push	r3
    39d0:	4f 92       	push	r4
    39d2:	5f 92       	push	r5
    39d4:	6f 92       	push	r6
    39d6:	7f 92       	push	r7
    39d8:	8f 92       	push	r8
    39da:	9f 92       	push	r9
    39dc:	af 92       	push	r10
    39de:	bf 92       	push	r11
    39e0:	cf 92       	push	r12
    39e2:	df 92       	push	r13
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	ca 1b       	sub	r28, r26
    39f6:	db 0b       	sbc	r29, r27
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	f8 94       	cli
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	cd bf       	out	0x3d, r28	; 61
    3a02:	09 94       	ijmp

00003a04 <__epilogue_restores__>:
    3a04:	2a 88       	ldd	r2, Y+18	; 0x12
    3a06:	39 88       	ldd	r3, Y+17	; 0x11
    3a08:	48 88       	ldd	r4, Y+16	; 0x10
    3a0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a10:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a12:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a14:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a16:	b9 84       	ldd	r11, Y+9	; 0x09
    3a18:	c8 84       	ldd	r12, Y+8	; 0x08
    3a1a:	df 80       	ldd	r13, Y+7	; 0x07
    3a1c:	ee 80       	ldd	r14, Y+6	; 0x06
    3a1e:	fd 80       	ldd	r15, Y+5	; 0x05
    3a20:	0c 81       	ldd	r16, Y+4	; 0x04
    3a22:	1b 81       	ldd	r17, Y+3	; 0x03
    3a24:	aa 81       	ldd	r26, Y+2	; 0x02
    3a26:	b9 81       	ldd	r27, Y+1	; 0x01
    3a28:	ce 0f       	add	r28, r30
    3a2a:	d1 1d       	adc	r29, r1
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	ed 01       	movw	r28, r26
    3a38:	08 95       	ret

00003a3a <itoa>:
    3a3a:	fb 01       	movw	r30, r22
    3a3c:	9f 01       	movw	r18, r30
    3a3e:	e8 94       	clt
    3a40:	42 30       	cpi	r20, 0x02	; 2
    3a42:	c4 f0       	brlt	.+48     	; 0x3a74 <itoa+0x3a>
    3a44:	45 32       	cpi	r20, 0x25	; 37
    3a46:	b4 f4       	brge	.+44     	; 0x3a74 <itoa+0x3a>
    3a48:	4a 30       	cpi	r20, 0x0A	; 10
    3a4a:	29 f4       	brne	.+10     	; 0x3a56 <itoa+0x1c>
    3a4c:	97 fb       	bst	r25, 7
    3a4e:	1e f4       	brtc	.+6      	; 0x3a56 <itoa+0x1c>
    3a50:	90 95       	com	r25
    3a52:	81 95       	neg	r24
    3a54:	9f 4f       	sbci	r25, 0xFF	; 255
    3a56:	64 2f       	mov	r22, r20
    3a58:	77 27       	eor	r23, r23
    3a5a:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__udivmodhi4>
    3a5e:	80 5d       	subi	r24, 0xD0	; 208
    3a60:	8a 33       	cpi	r24, 0x3A	; 58
    3a62:	0c f0       	brlt	.+2      	; 0x3a66 <itoa+0x2c>
    3a64:	89 5d       	subi	r24, 0xD9	; 217
    3a66:	81 93       	st	Z+, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	00 97       	sbiw	r24, 0x00	; 0
    3a6c:	a1 f7       	brne	.-24     	; 0x3a56 <itoa+0x1c>
    3a6e:	16 f4       	brtc	.+4      	; 0x3a74 <itoa+0x3a>
    3a70:	5d e2       	ldi	r21, 0x2D	; 45
    3a72:	51 93       	st	Z+, r21
    3a74:	10 82       	st	Z, r1
    3a76:	c9 01       	movw	r24, r18
    3a78:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <strrev>

00003a7c <strrev>:
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	fc 01       	movw	r30, r24
    3a80:	67 2f       	mov	r22, r23
    3a82:	71 91       	ld	r23, Z+
    3a84:	77 23       	and	r23, r23
    3a86:	e1 f7       	brne	.-8      	; 0x3a80 <strrev+0x4>
    3a88:	32 97       	sbiw	r30, 0x02	; 2
    3a8a:	04 c0       	rjmp	.+8      	; 0x3a94 <strrev+0x18>
    3a8c:	7c 91       	ld	r23, X
    3a8e:	6d 93       	st	X+, r22
    3a90:	70 83       	st	Z, r23
    3a92:	62 91       	ld	r22, -Z
    3a94:	ae 17       	cp	r26, r30
    3a96:	bf 07       	cpc	r27, r31
    3a98:	c8 f3       	brcs	.-14     	; 0x3a8c <strrev+0x10>
    3a9a:	08 95       	ret

00003a9c <_exit>:
    3a9c:	f8 94       	cli

00003a9e <__stop_program>:
    3a9e:	ff cf       	rjmp	.-2      	; 0x3a9e <__stop_program>
